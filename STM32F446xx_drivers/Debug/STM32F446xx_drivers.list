
STM32F446xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000283c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08002a0c  08002a0c  00012a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b7c  08002b7c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002b7c  08002b7c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b7c  08002b7c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b7c  08002b7c  00012b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000078  08002bfc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002bfc  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f0b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ef8  00000000  00000000  00024fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003b0  00000000  00000000  00025eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000328  00000000  00000000  00026260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d83  00000000  00000000  00026588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000412e  00000000  00000000  0002a30b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000cc77  00000000  00000000  0002e439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0003b0b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015d4  00000000  00000000  0003b104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080029f4 	.word	0x080029f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080029f4 	.word	0x080029f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <init_systick_timer>:
#include"LCD.h"

#define SYSTICK_TIM_CLK 16000000UL

void init_systick_timer(uint32_t tick_hz)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b087      	sub	sp, #28
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80002b8:	4b15      	ldr	r3, [pc, #84]	; (8000310 <init_systick_timer+0x60>)
 80002ba:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <init_systick_timer+0x64>)
 80002be:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80002c0:	4a15      	ldr	r2, [pc, #84]	; (8000318 <init_systick_timer+0x68>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c8:	3b01      	subs	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	431a      	orrs	r2, r3
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	f043 0202 	orr.w	r2, r3, #2
 80002e6:	693b      	ldr	r3, [r7, #16]
 80002e8:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80002ea:	693b      	ldr	r3, [r7, #16]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f043 0204 	orr.w	r2, r3, #4
 80002f2:	693b      	ldr	r3, [r7, #16]
 80002f4:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f043 0201 	orr.w	r2, r3, #1
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	601a      	str	r2, [r3, #0]
}
 8000302:	bf00      	nop
 8000304:	371c      	adds	r7, #28
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000e014 	.word	0xe000e014
 8000314:	e000e010 	.word	0xe000e010
 8000318:	00f42400 	.word	0x00f42400

0800031c <get_day_of_week>:

char* get_day_of_week(uint8_t i)
{
 800031c:	b4b0      	push	{r4, r5, r7}
 800031e:	b08b      	sub	sp, #44	; 0x2c
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
	char* days[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <get_day_of_week+0x38>)
 8000328:	f107 040c 	add.w	r4, r7, #12
 800032c:	461d      	mov	r5, r3
 800032e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000332:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000336:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[i-1];
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	3b01      	subs	r3, #1
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000344:	4413      	add	r3, r2
 8000346:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 800034a:	4618      	mov	r0, r3
 800034c:	372c      	adds	r7, #44	; 0x2c
 800034e:	46bd      	mov	sp, r7
 8000350:	bcb0      	pop	{r4, r5, r7}
 8000352:	4770      	bx	lr
 8000354:	08002a50 	.word	0x08002a50

08000358 <number_to_string>:

void number_to_string(uint8_t num, char* buf)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	6039      	str	r1, [r7, #0]
 8000362:	71fb      	strb	r3, [r7, #7]
	if (num < 10)
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	2b09      	cmp	r3, #9
 8000368:	d809      	bhi.n	800037e <number_to_string+0x26>
	{
		buf[0] = '0';
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	2230      	movs	r2, #48	; 0x30
 800036e:	701a      	strb	r2, [r3, #0]
		buf[1] = num + 48;
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	3301      	adds	r3, #1
 8000374:	79fa      	ldrb	r2, [r7, #7]
 8000376:	3230      	adds	r2, #48	; 0x30
 8000378:	b2d2      	uxtb	r2, r2
 800037a:	701a      	strb	r2, [r3, #0]
	}else if (num >= 10 && num < 99)
	{
		buf[0] = (num / 10) + 48;
		buf[1] = (num % 10) + 48;
	}
}
 800037c:	e01f      	b.n	80003be <number_to_string+0x66>
	}else if (num >= 10 && num < 99)
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2b09      	cmp	r3, #9
 8000382:	d91c      	bls.n	80003be <number_to_string+0x66>
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	2b62      	cmp	r3, #98	; 0x62
 8000388:	d819      	bhi.n	80003be <number_to_string+0x66>
		buf[0] = (num / 10) + 48;
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	4a0f      	ldr	r2, [pc, #60]	; (80003cc <number_to_string+0x74>)
 800038e:	fba2 2303 	umull	r2, r3, r2, r3
 8000392:	08db      	lsrs	r3, r3, #3
 8000394:	b2db      	uxtb	r3, r3
 8000396:	3330      	adds	r3, #48	; 0x30
 8000398:	b2da      	uxtb	r2, r3
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	701a      	strb	r2, [r3, #0]
		buf[1] = (num % 10) + 48;
 800039e:	79fa      	ldrb	r2, [r7, #7]
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <number_to_string+0x74>)
 80003a2:	fba3 1302 	umull	r1, r3, r3, r2
 80003a6:	08d9      	lsrs	r1, r3, #3
 80003a8:	460b      	mov	r3, r1
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	440b      	add	r3, r1
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	1ad3      	subs	r3, r2, r3
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	3301      	adds	r3, #1
 80003b8:	3230      	adds	r2, #48	; 0x30
 80003ba:	b2d2      	uxtb	r2, r2
 80003bc:	701a      	strb	r2, [r3, #0]
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	cccccccd 	.word	0xcccccccd

080003d0 <time_to_string>:

char* time_to_string(RTC_TIME *rtc_time)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = ':';
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <time_to_string+0x48>)
 80003da:	223a      	movs	r2, #58	; 0x3a
 80003dc:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <time_to_string+0x48>)
 80003e0:	223a      	movs	r2, #58	; 0x3a
 80003e2:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours, buf);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	490b      	ldr	r1, [pc, #44]	; (8000418 <time_to_string+0x48>)
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ffb4 	bl	8000358 <number_to_string>
	number_to_string(rtc_time->minutes, &buf[3]);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	785b      	ldrb	r3, [r3, #1]
 80003f4:	4909      	ldr	r1, [pc, #36]	; (800041c <time_to_string+0x4c>)
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ffae 	bl	8000358 <number_to_string>
	number_to_string(rtc_time->seconds, &buf[6]);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	789b      	ldrb	r3, [r3, #2]
 8000400:	4907      	ldr	r1, [pc, #28]	; (8000420 <time_to_string+0x50>)
 8000402:	4618      	mov	r0, r3
 8000404:	f7ff ffa8 	bl	8000358 <number_to_string>

	buf[8] = '\0';
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <time_to_string+0x48>)
 800040a:	2200      	movs	r2, #0
 800040c:	721a      	strb	r2, [r3, #8]

	return buf;
 800040e:	4b02      	ldr	r3, [pc, #8]	; (8000418 <time_to_string+0x48>)
}
 8000410:	4618      	mov	r0, r3
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000094 	.word	0x20000094
 800041c:	20000097 	.word	0x20000097
 8000420:	2000009a 	.word	0x2000009a

08000424 <date_to_string>:

char* date_to_string(RTC_DATE *rtc_date)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = '/';
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <date_to_string+0x48>)
 800042e:	222f      	movs	r2, #47	; 0x2f
 8000430:	709a      	strb	r2, [r3, #2]
	buf[5] = '/';
 8000432:	4b0e      	ldr	r3, [pc, #56]	; (800046c <date_to_string+0x48>)
 8000434:	222f      	movs	r2, #47	; 0x2f
 8000436:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date, buf);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	490b      	ldr	r1, [pc, #44]	; (800046c <date_to_string+0x48>)
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff ff8a 	bl	8000358 <number_to_string>
	number_to_string(rtc_date->month, &buf[3]);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	785b      	ldrb	r3, [r3, #1]
 8000448:	4909      	ldr	r1, [pc, #36]	; (8000470 <date_to_string+0x4c>)
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ff84 	bl	8000358 <number_to_string>
	number_to_string(rtc_date->year, &buf[6]);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	789b      	ldrb	r3, [r3, #2]
 8000454:	4907      	ldr	r1, [pc, #28]	; (8000474 <date_to_string+0x50>)
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ff7e 	bl	8000358 <number_to_string>

	buf[8] = '\0';
 800045c:	4b03      	ldr	r3, [pc, #12]	; (800046c <date_to_string+0x48>)
 800045e:	2200      	movs	r2, #0
 8000460:	721a      	strb	r2, [r3, #8]

	return buf;
 8000462:	4b02      	ldr	r3, [pc, #8]	; (800046c <date_to_string+0x48>)
}
 8000464:	4618      	mov	r0, r3
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	200000a0 	.word	0x200000a0
 8000470:	200000a3 	.word	0x200000a3
 8000474:	200000a6 	.word	0x200000a6

08000478 <main>:

int main(void)
{
 8000478:	b590      	push	{r4, r7, lr}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
	RTC_TIME time;
	RTC_DATE date;


	printf("RTC test\n");
 800047e:	4833      	ldr	r0, [pc, #204]	; (800054c <main+0xd4>)
 8000480:	f001 fb72 	bl	8001b68 <puts>

	lcd_init();
 8000484:	f000 fbf2 	bl	8000c6c <lcd_init>

	lcd_print_string("RTC Test...");
 8000488:	4831      	ldr	r0, [pc, #196]	; (8000550 <main+0xd8>)
 800048a:	f000 fbdb 	bl	8000c44 <lcd_print_string>

	if (ds1307_init())
 800048e:	f000 f9ad 	bl	80007ec <ds1307_init>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d003      	beq.n	80004a0 <main+0x28>
	{
		printf("RTC Init has failed\n");
 8000498:	482e      	ldr	r0, [pc, #184]	; (8000554 <main+0xdc>)
 800049a:	f001 fb65 	bl	8001b68 <puts>
		while(1);
 800049e:	e7fe      	b.n	800049e <main+0x26>
	}

	init_systick_timer(1);
 80004a0:	2001      	movs	r0, #1
 80004a2:	f7ff ff05 	bl	80002b0 <init_systick_timer>

	date.day = MONDAY;
 80004a6:	2302      	movs	r3, #2
 80004a8:	71fb      	strb	r3, [r7, #7]
	date.date = 14;
 80004aa:	230e      	movs	r3, #14
 80004ac:	713b      	strb	r3, [r7, #4]
	date.month = 3;
 80004ae:	2303      	movs	r3, #3
 80004b0:	717b      	strb	r3, [r7, #5]
	date.year = 22;
 80004b2:	2316      	movs	r3, #22
 80004b4:	71bb      	strb	r3, [r7, #6]

	time.hours = 3;
 80004b6:	2303      	movs	r3, #3
 80004b8:	723b      	strb	r3, [r7, #8]
	time.minutes = 51;
 80004ba:	2333      	movs	r3, #51	; 0x33
 80004bc:	727b      	strb	r3, [r7, #9]
	time.seconds = 41;
 80004be:	2329      	movs	r3, #41	; 0x29
 80004c0:	72bb      	strb	r3, [r7, #10]
	time.format = TIME_FORMAT_12HRS_PM;
 80004c2:	2301      	movs	r3, #1
 80004c4:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&date);
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 fa3f 	bl	800094c <ds1307_set_current_date>
	ds1307_set_current_time(&time);
 80004ce:	f107 0308 	add.w	r3, r7, #8
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 f9a8 	bl	8000828 <ds1307_set_current_time>

	ds1307_get_current_date(&date);
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 fa66 	bl	80009ac <ds1307_get_current_date>
	ds1307_get_current_time(&time);
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 f9e8 	bl	80008ba <ds1307_get_current_time>

	char *am_pm;
	if (time.format	!= TIME_FORMAT_24HRS)
 80004ea:	7afb      	ldrb	r3, [r7, #11]
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	d012      	beq.n	8000516 <main+0x9e>
	{
		am_pm = (time.format) ? "PM" : "AM";
 80004f0:	7afb      	ldrb	r3, [r7, #11]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <main+0x82>
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <main+0xe0>)
 80004f8:	e000      	b.n	80004fc <main+0x84>
 80004fa:	4b18      	ldr	r3, [pc, #96]	; (800055c <main+0xe4>)
 80004fc:	60fb      	str	r3, [r7, #12]
		printf("Current time = %s %s\n", time_to_string(&time), am_pm);
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ff64 	bl	80003d0 <time_to_string>
 8000508:	4603      	mov	r3, r0
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	4619      	mov	r1, r3
 800050e:	4814      	ldr	r0, [pc, #80]	; (8000560 <main+0xe8>)
 8000510:	f001 faa4 	bl	8001a5c <iprintf>
 8000514:	e009      	b.n	800052a <main+0xb2>
	}else
	{
		printf("Current time = %s\n", time_to_string(&time));
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff ff58 	bl	80003d0 <time_to_string>
 8000520:	4603      	mov	r3, r0
 8000522:	4619      	mov	r1, r3
 8000524:	480f      	ldr	r0, [pc, #60]	; (8000564 <main+0xec>)
 8000526:	f001 fa99 	bl	8001a5c <iprintf>
	}

	printf("Current date = %s <%s>\n", date_to_string(&date), get_day_of_week(date.day));
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ff79 	bl	8000424 <date_to_string>
 8000532:	4604      	mov	r4, r0
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fef0 	bl	800031c <get_day_of_week>
 800053c:	4603      	mov	r3, r0
 800053e:	461a      	mov	r2, r3
 8000540:	4621      	mov	r1, r4
 8000542:	4809      	ldr	r0, [pc, #36]	; (8000568 <main+0xf0>)
 8000544:	f001 fa8a 	bl	8001a5c <iprintf>

	while(1);
 8000548:	e7fe      	b.n	8000548 <main+0xd0>
 800054a:	bf00      	nop
 800054c:	08002a6c 	.word	0x08002a6c
 8000550:	08002a78 	.word	0x08002a78
 8000554:	08002a84 	.word	0x08002a84
 8000558:	08002a98 	.word	0x08002a98
 800055c:	08002a9c 	.word	0x08002a9c
 8000560:	08002aa0 	.word	0x08002aa0
 8000564:	08002ab8 	.word	0x08002ab8
 8000568:	08002acc 	.word	0x08002acc

0800056c <SysTick_Handler>:
}

void SysTick_Handler(void)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
	RTC_TIME time;
	RTC_DATE date;

	ds1307_get_current_date(&date);
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	4618      	mov	r0, r3
 8000576:	f000 fa19 	bl	80009ac <ds1307_get_current_date>
	ds1307_get_current_time(&time);
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f99b 	bl	80008ba <ds1307_get_current_time>

	char *am_pm;
	if (time.format	!= TIME_FORMAT_24HRS)
 8000584:	7afb      	ldrb	r3, [r7, #11]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d012      	beq.n	80005b0 <SysTick_Handler+0x44>
	{
		am_pm = (time.format) ? "PM" : "AM";
 800058a:	7afb      	ldrb	r3, [r7, #11]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SysTick_Handler+0x28>
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <SysTick_Handler+0x80>)
 8000592:	e000      	b.n	8000596 <SysTick_Handler+0x2a>
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <SysTick_Handler+0x84>)
 8000596:	60fb      	str	r3, [r7, #12]
		printf("Current time = %s %s\n", time_to_string(&time), am_pm);
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ff17 	bl	80003d0 <time_to_string>
 80005a2:	4603      	mov	r3, r0
 80005a4:	68fa      	ldr	r2, [r7, #12]
 80005a6:	4619      	mov	r1, r3
 80005a8:	4812      	ldr	r0, [pc, #72]	; (80005f4 <SysTick_Handler+0x88>)
 80005aa:	f001 fa57 	bl	8001a5c <iprintf>
 80005ae:	e009      	b.n	80005c4 <SysTick_Handler+0x58>
	}else
	{
		printf("Current time = %s\n", time_to_string(&time));
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ff0b 	bl	80003d0 <time_to_string>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4619      	mov	r1, r3
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <SysTick_Handler+0x8c>)
 80005c0:	f001 fa4c 	bl	8001a5c <iprintf>
	}

	printf("Current date = %s <%s>\n", date_to_string(&date), get_day_of_week(date.day));
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff ff2c 	bl	8000424 <date_to_string>
 80005cc:	4604      	mov	r4, r0
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fea3 	bl	800031c <get_day_of_week>
 80005d6:	4603      	mov	r3, r0
 80005d8:	461a      	mov	r2, r3
 80005da:	4621      	mov	r1, r4
 80005dc:	4807      	ldr	r0, [pc, #28]	; (80005fc <SysTick_Handler+0x90>)
 80005de:	f001 fa3d 	bl	8001a5c <iprintf>
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd90      	pop	{r4, r7, pc}
 80005ea:	bf00      	nop
 80005ec:	08002a98 	.word	0x08002a98
 80005f0:	08002a9c 	.word	0x08002a9c
 80005f4:	08002aa0 	.word	0x08002aa0
 80005f8:	08002ab8 	.word	0x08002ab8
 80005fc:	08002acc 	.word	0x08002acc

08000600 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <ITM_SendChar+0x48>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <ITM_SendChar+0x48>)
 8000610:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000614:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <ITM_SendChar+0x4c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a0c      	ldr	r2, [pc, #48]	; (800064c <ITM_SendChar+0x4c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000622:	bf00      	nop
 8000624:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0f8      	beq.n	8000624 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000632:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	6013      	str	r3, [r2, #0]
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000edfc 	.word	0xe000edfc
 800064c:	e0000e00 	.word	0xe0000e00

08000650 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	e00a      	b.n	8000678 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000662:	f3af 8000 	nop.w
 8000666:	4601      	mov	r1, r0
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	60ba      	str	r2, [r7, #8]
 800066e:	b2ca      	uxtb	r2, r1
 8000670:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	3301      	adds	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697a      	ldr	r2, [r7, #20]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	429a      	cmp	r2, r3
 800067e:	dbf0      	blt.n	8000662 <_read+0x12>
	}

return len;
 8000680:	687b      	ldr	r3, [r7, #4]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b086      	sub	sp, #24
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	e009      	b.n	80006b0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	60ba      	str	r2, [r7, #8]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ffab 	bl	8000600 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	3301      	adds	r3, #1
 80006ae:	617b      	str	r3, [r7, #20]
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	dbf1      	blt.n	800069c <_write+0x12>
	}
	return len;
 80006b8:	687b      	ldr	r3, [r7, #4]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <_close>:

int _close(int file)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
	return -1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006ea:	605a      	str	r2, [r3, #4]
	return 0;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <_isatty>:

int _isatty(int file)
{
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
	return 1;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
	return 0;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000734:	4a14      	ldr	r2, [pc, #80]	; (8000788 <_sbrk+0x5c>)
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <_sbrk+0x60>)
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <_sbrk+0x64>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d102      	bne.n	800074e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <_sbrk+0x64>)
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <_sbrk+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <_sbrk+0x64>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	429a      	cmp	r2, r3
 800075a:	d207      	bcs.n	800076c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800075c:	f001 f94c 	bl	80019f8 <__errno>
 8000760:	4603      	mov	r3, r0
 8000762:	220c      	movs	r2, #12
 8000764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	e009      	b.n	8000780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <_sbrk+0x64>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <_sbrk+0x64>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	4a05      	ldr	r2, [pc, #20]	; (8000790 <_sbrk+0x64>)
 800077c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800077e:	68fb      	ldr	r3, [r7, #12]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20020000 	.word	0x20020000
 800078c:	00000400 	.word	0x00000400
 8000790:	200000ac 	.word	0x200000ac
 8000794:	200000f0 	.word	0x200000f0

08000798 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800079a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800079c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a2:	490d      	ldr	r1, [pc, #52]	; (80007d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <LoopForever+0xe>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b8:	4c0a      	ldr	r4, [pc, #40]	; (80007e4 <LoopForever+0x16>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007c6:	f001 f91d 	bl	8001a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ca:	f7ff fe55 	bl	8000478 <main>

080007ce <LoopForever>:

LoopForever:
    b LoopForever
 80007ce:	e7fe      	b.n	80007ce <LoopForever>
  ldr   r0, =_estack
 80007d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80007dc:	08002b84 	.word	0x08002b84
  ldr r2, =_sbss
 80007e0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80007e4:	200000f0 	.word	0x200000f0

080007e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC_IRQHandler>
	...

080007ec <ds1307_init>:
/*************************************************************************************************/
/*									PERIPHERAL RELATED FUNCTIONS									 */
/*************************************************************************************************/

uint8_t ds1307_init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
	//1. Initialize the I2C pins
	ds1307_i2c_pin_config();
 80007f2:	f000 f90f 	bl	8000a14 <ds1307_i2c_pin_config>

	//2. Initialize the I2C peripheral
	ds1307_i2c_config();
 80007f6:	f000 f949 	bl	8000a8c <ds1307_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 80007fa:	2101      	movs	r1, #1
 80007fc:	4809      	ldr	r0, [pc, #36]	; (8000824 <ds1307_init+0x38>)
 80007fe:	f000 feed 	bl	80015dc <I2C_PeripheralControl>

	//4. Make clock halt = 0
	ds1307_write(0x00, DS1307_ADDR_SEC);
 8000802:	2100      	movs	r1, #0
 8000804:	2000      	movs	r0, #0
 8000806:	f000 f957 	bl	8000ab8 <ds1307_write>

	//5. Read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f970 	bl	8000af0 <ds1307_read>
 8000810:	4603      	mov	r3, r0
 8000812:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7) & 0x01);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	09db      	lsrs	r3, r3, #7
 8000818:	b2db      	uxtb	r3, r3
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40005400 	.word	0x40005400

08000828 <ds1307_set_current_time>:

void ds1307_set_current_time(RTC_TIME *rtc_time)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hours;

	seconds = binary_to_bcd(rtc_time->seconds);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	789b      	ldrb	r3, [r3, #2]
 8000834:	4618      	mov	r0, r3
 8000836:	f000 f979 	bl	8000b2c <binary_to_bcd>
 800083a:	4603      	mov	r3, r0
 800083c:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 800083e:	7bbb      	ldrb	r3, [r7, #14]
 8000840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000844:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 8000846:	7bbb      	ldrb	r3, [r7, #14]
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f934 	bl	8000ab8 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	785b      	ldrb	r3, [r3, #1]
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f969 	bl	8000b2c <binary_to_bcd>
 800085a:	4603      	mov	r3, r0
 800085c:	2101      	movs	r1, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f92a 	bl	8000ab8 <ds1307_write>

	hours = binary_to_bcd(rtc_time->hours);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f95f 	bl	8000b2c <binary_to_bcd>
 800086e:	4603      	mov	r3, r0
 8000870:	73fb      	strb	r3, [r7, #15]
	if (rtc_time->format == TIME_FORMAT_24HRS)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	78db      	ldrb	r3, [r3, #3]
 8000876:	2b02      	cmp	r3, #2
 8000878:	d104      	bne.n	8000884 <ds1307_set_current_time+0x5c>
	{
		hours &= ~(1 << 6);
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000880:	73fb      	strb	r3, [r7, #15]
 8000882:	e011      	b.n	80008a8 <ds1307_set_current_time+0x80>
	}else
	{
		hours |= (1 << 6);
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088a:	73fb      	strb	r3, [r7, #15]
		hours = (rtc_time->format == TIME_FORMAT_12HRS_PM) ? hours | (1 << 5) : hours & ~(1 << 5);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	78db      	ldrb	r3, [r3, #3]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d104      	bne.n	800089e <ds1307_set_current_time+0x76>
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	f043 0320 	orr.w	r3, r3, #32
 800089a:	b2db      	uxtb	r3, r3
 800089c:	e003      	b.n	80008a6 <ds1307_set_current_time+0x7e>
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	f023 0320 	bic.w	r3, r3, #32
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hours, DS1307_ADDR_HRS);
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	2102      	movs	r1, #2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f903 	bl	8000ab8 <ds1307_write>
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_TIME *rtc_time)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b084      	sub	sp, #16
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hours;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 f914 	bl	8000af0 <ds1307_read>
 80008c8:	4603      	mov	r3, r0
 80008ca:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008d2:	73bb      	strb	r3, [r7, #14]
	rtc_time->seconds = bcd_to_binary(seconds);
 80008d4:	7bbb      	ldrb	r3, [r7, #14]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 f954 	bl	8000b84 <bcd_to_binary>
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	709a      	strb	r2, [r3, #2]

	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 80008e4:	2001      	movs	r0, #1
 80008e6:	f000 f903 	bl	8000af0 <ds1307_read>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f949 	bl	8000b84 <bcd_to_binary>
 80008f2:	4603      	mov	r3, r0
 80008f4:	461a      	mov	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	705a      	strb	r2, [r3, #1]

	hours = ds1307_read(DS1307_ADDR_HRS);
 80008fa:	2002      	movs	r0, #2
 80008fc:	f000 f8f8 	bl	8000af0 <ds1307_read>
 8000900:	4603      	mov	r3, r0
 8000902:	73fb      	strb	r3, [r7, #15]
	if (hours & (1 << 6))
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800090a:	2b00      	cmp	r3, #0
 800090c:	d00f      	beq.n	800092e <ds1307_get_current_time+0x74>
	{
		rtc_time->format = !((hours & (1 << 5)) == 0);
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	f003 0320 	and.w	r3, r3, #32
 8000914:	2b00      	cmp	r3, #0
 8000916:	bf14      	ite	ne
 8000918:	2301      	movne	r3, #1
 800091a:	2300      	moveq	r3, #0
 800091c:	b2db      	uxtb	r3, r3
 800091e:	461a      	mov	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	70da      	strb	r2, [r3, #3]
		hours &= ~(0x3 << 5);
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800092a:	73fb      	strb	r3, [r7, #15]
 800092c:	e002      	b.n	8000934 <ds1307_get_current_time+0x7a>
	}else
	{
		rtc_time->format = TIME_FORMAT_24HRS;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2202      	movs	r2, #2
 8000932:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hours);
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f924 	bl	8000b84 <bcd_to_binary>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	701a      	strb	r2, [r3, #0]
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_DATE *rtc_date)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f000 f8e7 	bl	8000b2c <binary_to_bcd>
 800095e:	4603      	mov	r3, r0
 8000960:	2104      	movs	r1, #4
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f8a8 	bl	8000ab8 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	785b      	ldrb	r3, [r3, #1]
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f8dd 	bl	8000b2c <binary_to_bcd>
 8000972:	4603      	mov	r3, r0
 8000974:	2105      	movs	r1, #5
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f89e 	bl	8000ab8 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	789b      	ldrb	r3, [r3, #2]
 8000980:	4618      	mov	r0, r3
 8000982:	f000 f8d3 	bl	8000b2c <binary_to_bcd>
 8000986:	4603      	mov	r3, r0
 8000988:	2106      	movs	r1, #6
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f894 	bl	8000ab8 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	78db      	ldrb	r3, [r3, #3]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f8c9 	bl	8000b2c <binary_to_bcd>
 800099a:	4603      	mov	r3, r0
 800099c:	2103      	movs	r1, #3
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 f88a 	bl	8000ab8 <ds1307_write>
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_DATE *rtc_date)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 80009b4:	2004      	movs	r0, #4
 80009b6:	f000 f89b 	bl	8000af0 <ds1307_read>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f8e1 	bl	8000b84 <bcd_to_binary>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	701a      	strb	r2, [r3, #0]
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 80009ca:	2003      	movs	r0, #3
 80009cc:	f000 f890 	bl	8000af0 <ds1307_read>
 80009d0:	4603      	mov	r3, r0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f8d6 	bl	8000b84 <bcd_to_binary>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	70da      	strb	r2, [r3, #3]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 80009e0:	2005      	movs	r0, #5
 80009e2:	f000 f885 	bl	8000af0 <ds1307_read>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 f8cb 	bl	8000b84 <bcd_to_binary>
 80009ee:	4603      	mov	r3, r0
 80009f0:	461a      	mov	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 80009f6:	2006      	movs	r0, #6
 80009f8:	f000 f87a 	bl	8000af0 <ds1307_read>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f8c0 	bl	8000b84 <bcd_to_binary>
 8000a04:	4603      	mov	r3, r0
 8000a06:	461a      	mov	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	709a      	strb	r2, [r3, #2]
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
	GPIO_Handle i2c_sda, i2c_scl;

	memset(&i2c_sda, 0, sizeof(i2c_sda));
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	220c      	movs	r2, #12
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 f812 	bl	8001a4c <memset>
	memset(&i2c_scl, 0, sizeof(i2c_scl));
 8000a28:	463b      	mov	r3, r7
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 f80c 	bl	8001a4c <memset>
	/*
	 * I2C1_SCL -> PB6
	 * I2C1_SDA -> PB7
	 */

	i2c_sda.pGPIO = DS1307_I2C_GPIO_PORT;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <ds1307_i2c_pin_config+0x74>)
 8000a36:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PIN_CONFIG.GPIO_PinAltFunMode = 4;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PIN_CONFIG.GPIO_PinMode = GPIO_MODE_ALT;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PIN_CONFIG.GPIO_PinNumber = DS1307_I2C_SDA;
 8000a40:	2307      	movs	r3, #7
 8000a42:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PIN_CONFIG.GPIO_PinOPType = GPIO_OUT_TYPE_OD;
 8000a44:	2301      	movs	r3, #1
 8000a46:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PIN_CONFIG.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PIN_CONFIG.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 fa19 	bl	8000e8c <GPIO_Init>

	i2c_scl.pGPIO = DS1307_I2C_GPIO_PORT;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <ds1307_i2c_pin_config+0x74>)
 8000a5c:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PIN_CONFIG.GPIO_PinAltFunMode = 4;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PIN_CONFIG.GPIO_PinMode = GPIO_MODE_ALT;
 8000a62:	2302      	movs	r3, #2
 8000a64:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PIN_CONFIG.GPIO_PinNumber = DS1307_I2C_SCL;
 8000a66:	2306      	movs	r3, #6
 8000a68:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PIN_CONFIG.GPIO_PinOPType = GPIO_OUT_TYPE_OD;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PIN_CONFIG.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PIN_CONFIG.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a72:	2302      	movs	r3, #2
 8000a74:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 8000a76:	463b      	mov	r3, r7
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fa07 	bl	8000e8c <GPIO_Init>

}
 8000a7e:	bf00      	nop
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40020400 	.word	0x40020400

08000a8c <ds1307_i2c_config>:

static void ds1307_i2c_config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	ds1307_i2c_Handle.pI2Cx = DS1307_I2C;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <ds1307_i2c_config+0x20>)
 8000a92:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <ds1307_i2c_config+0x24>)
 8000a94:	601a      	str	r2, [r3, #0]
	ds1307_i2c_Handle.I2C_CONFIG.I2C_ACKControl = I2C_ACK_ENABLE;
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <ds1307_i2c_config+0x20>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	725a      	strb	r2, [r3, #9]
	ds1307_i2c_Handle.I2C_CONFIG.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <ds1307_i2c_config+0x20>)
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <ds1307_i2c_config+0x28>)
 8000aa0:	605a      	str	r2, [r3, #4]

	I2C_Init(&ds1307_i2c_Handle);
 8000aa2:	4802      	ldr	r0, [pc, #8]	; (8000aac <ds1307_i2c_config+0x20>)
 8000aa4:	f000 fc88 	bl	80013b8 <I2C_Init>
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200000b8 	.word	0x200000b8
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	000186a0 	.word	0x000186a0

08000ab8 <ds1307_write>:

static void ds1307_write(uint8_t value, uint8_t address)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	4603      	mov	r3, r0
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = address;
 8000ac8:	79bb      	ldrb	r3, [r7, #6]
 8000aca:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&ds1307_i2c_Handle, tx, 2, DS1307_I2C_ADDRESS, DISABLE);
 8000ad0:	f107 010c 	add.w	r1, r7, #12
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2368      	movs	r3, #104	; 0x68
 8000ada:	2202      	movs	r2, #2
 8000adc:	4803      	ldr	r0, [pc, #12]	; (8000aec <ds1307_write+0x34>)
 8000ade:	f000 fdad 	bl	800163c <I2C_MasterSendData>
}
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000b8 	.word	0x200000b8

08000af0 <ds1307_read>:

static uint8_t ds1307_read(uint8_t address)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	I2C_MasterSendData(&ds1307_i2c_Handle, &address, 1, DS1307_I2C_ADDRESS, DISABLE);
 8000afa:	1df9      	adds	r1, r7, #7
 8000afc:	2300      	movs	r3, #0
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2368      	movs	r3, #104	; 0x68
 8000b02:	2201      	movs	r2, #1
 8000b04:	4808      	ldr	r0, [pc, #32]	; (8000b28 <ds1307_read+0x38>)
 8000b06:	f000 fd99 	bl	800163c <I2C_MasterSendData>
	I2C_MasterReceiveData(&ds1307_i2c_Handle, &data, 1, DS1307_I2C_ADDRESS, DISABLE);
 8000b0a:	f107 010f 	add.w	r1, r7, #15
 8000b0e:	2300      	movs	r3, #0
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2368      	movs	r3, #104	; 0x68
 8000b14:	2201      	movs	r2, #1
 8000b16:	4804      	ldr	r0, [pc, #16]	; (8000b28 <ds1307_read+0x38>)
 8000b18:	f000 fe68 	bl	80017ec <I2C_MasterReceiveData>

	return data;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000b8 	.word	0x200000b8

08000b2c <binary_to_bcd>:

static uint8_t binary_to_bcd(uint8_t value)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n, bcd;

	bcd = value;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	73fb      	strb	r3, [r7, #15]
	if (value >= 10)
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b09      	cmp	r3, #9
 8000b3e:	d918      	bls.n	8000b72 <binary_to_bcd+0x46>
	{
		m = value / 10;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <binary_to_bcd+0x54>)
 8000b44:	fba2 2303 	umull	r2, r3, r2, r3
 8000b48:	08db      	lsrs	r3, r3, #3
 8000b4a:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000b4c:	79fa      	ldrb	r2, [r7, #7]
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <binary_to_bcd+0x54>)
 8000b50:	fba3 1302 	umull	r1, r3, r3, r2
 8000b54:	08d9      	lsrs	r1, r3, #3
 8000b56:	460b      	mov	r3, r1
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	737b      	strb	r3, [r7, #13]
		bcd = (uint8_t)((m << 4) | n);
 8000b62:	7bbb      	ldrb	r3, [r7, #14]
 8000b64:	011b      	lsls	r3, r3, #4
 8000b66:	b25a      	sxtb	r2, r3
 8000b68:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	cccccccd 	.word	0xcccccccd

08000b84 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n, binary;

	m = (uint8_t)((value >> 4) * 10);
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	091b      	lsrs	r3, r3, #4
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
	n = value & (uint8_t)0x0F;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f003 030f 	and.w	r3, r3, #15
 8000ba4:	73bb      	strb	r3, [r7, #14]
	binary = m + n;
 8000ba6:	7bfa      	ldrb	r2, [r7, #15]
 8000ba8:	7bbb      	ldrb	r3, [r7, #14]
 8000baa:	4413      	add	r3, r2
 8000bac:	737b      	strb	r3, [r7, #13]

	return binary;
 8000bae:	7b7b      	ldrb	r3, [r7, #13]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <lcd_send_command>:
static void mdelay(uint32_t count);

static void udelay(uint32_t count);

void lcd_send_command(uint8_t command)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	/*
	 * 	RS = 0 for LCD command
	 * 	R/nW = 0 to write
	 */
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	480c      	ldr	r0, [pc, #48]	; (8000bfc <lcd_send_command+0x40>)
 8000bcc:	f000 fbce 	bl	800136c <GPIO_WritePin>
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <lcd_send_command+0x40>)
 8000bd6:	f000 fbc9 	bl	800136c <GPIO_WritePin>

	/* 	Send the higher nibble	*/
	write_4_bits(command >> 4);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	091b      	lsrs	r3, r3, #4
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 f8cd 	bl	8000d80 <write_4_bits>
	/* 	Send the lower nibble	*/
	write_4_bits(command & 0x0F);
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	f003 030f 	and.w	r3, r3, #15
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f8c6 	bl	8000d80 <write_4_bits>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40020800 	.word	0x40020800

08000c00 <lcd_print_char>:

void lcd_print_char(uint8_t data)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
	/*
	 * 	RS = 1 for LCD user data
	 * 	R/nW = 0 to write
	 */
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	480c      	ldr	r0, [pc, #48]	; (8000c40 <lcd_print_char+0x40>)
 8000c10:	f000 fbac 	bl	800136c <GPIO_WritePin>
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2101      	movs	r1, #1
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <lcd_print_char+0x40>)
 8000c1a:	f000 fba7 	bl	800136c <GPIO_WritePin>

	/* 	Send the higher nibble	*/
	write_4_bits(data >> 4);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	091b      	lsrs	r3, r3, #4
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f8ab 	bl	8000d80 <write_4_bits>
	/* 	Send the lower nibble	*/
	write_4_bits(data & 0x0F);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 030f 	and.w	r3, r3, #15
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f8a4 	bl	8000d80 <write_4_bits>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40020800 	.word	0x40020800

08000c44 <lcd_print_string>:

void lcd_print_string(char *message)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_print_char((uint8_t)*message++);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ffd3 	bl	8000c00 <lcd_print_char>
	}while (*message != '\0');
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1f4      	bne.n	8000c4c <lcd_print_string+0x8>
}
 8000c62:	bf00      	nop
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <lcd_init>:

void lcd_init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
	//1. Configure the GPIO pins which are used for LCD connections
	GPIO_Handle lcd_signal;

	lcd_signal.pGPIO = LCD_GPIO_PORT;
 8000c72:	4b42      	ldr	r3, [pc, #264]	; (8000d7c <lcd_init+0x110>)
 8000c74:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PIN_CONFIG.GPIO_PinMode = GPIO_MODE_OUT;
 8000c76:	2301      	movs	r3, #1
 8000c78:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PIN_CONFIG.GPIO_PinOPType = GPIO_OUT_TYPE_PP;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PIN_CONFIG.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PIN_CONFIG.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c82:	2302      	movs	r3, #2
 8000c84:	72bb      	strb	r3, [r7, #10]

	lcd_signal.GPIO_PIN_CONFIG.GPIO_PinNumber = LCD_GPIO_RS;
 8000c86:	2300      	movs	r3, #0
 8000c88:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f8fd 	bl	8000e8c <GPIO_Init>

	lcd_signal.GPIO_PIN_CONFIG.GPIO_PinNumber = LCD_GPIO_RW;
 8000c92:	2301      	movs	r3, #1
 8000c94:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f8f7 	bl	8000e8c <GPIO_Init>

	lcd_signal.GPIO_PIN_CONFIG.GPIO_PinNumber = LCD_GPIO_EN;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f8f1 	bl	8000e8c <GPIO_Init>

	lcd_signal.GPIO_PIN_CONFIG.GPIO_PinNumber = LCD_GPIO_D4;
 8000caa:	2303      	movs	r3, #3
 8000cac:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 f8eb 	bl	8000e8c <GPIO_Init>

	lcd_signal.GPIO_PIN_CONFIG.GPIO_PinNumber = LCD_GPIO_D5;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 f8e5 	bl	8000e8c <GPIO_Init>

	lcd_signal.GPIO_PIN_CONFIG.GPIO_PinNumber = LCD_GPIO_D6;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f8df 	bl	8000e8c <GPIO_Init>

	lcd_signal.GPIO_PIN_CONFIG.GPIO_PinNumber = LCD_GPIO_D7;
 8000cce:	2306      	movs	r3, #6
 8000cd0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 f8d9 	bl	8000e8c <GPIO_Init>

	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4827      	ldr	r0, [pc, #156]	; (8000d7c <lcd_init+0x110>)
 8000ce0:	f000 fb44 	bl	800136c <GPIO_WritePin>
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	4824      	ldr	r0, [pc, #144]	; (8000d7c <lcd_init+0x110>)
 8000cea:	f000 fb3f 	bl	800136c <GPIO_WritePin>
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4822      	ldr	r0, [pc, #136]	; (8000d7c <lcd_init+0x110>)
 8000cf4:	f000 fb3a 	bl	800136c <GPIO_WritePin>
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2103      	movs	r1, #3
 8000cfc:	481f      	ldr	r0, [pc, #124]	; (8000d7c <lcd_init+0x110>)
 8000cfe:	f000 fb35 	bl	800136c <GPIO_WritePin>
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2104      	movs	r1, #4
 8000d06:	481d      	ldr	r0, [pc, #116]	; (8000d7c <lcd_init+0x110>)
 8000d08:	f000 fb30 	bl	800136c <GPIO_WritePin>
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	481a      	ldr	r0, [pc, #104]	; (8000d7c <lcd_init+0x110>)
 8000d12:	f000 fb2b 	bl	800136c <GPIO_WritePin>
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2106      	movs	r1, #6
 8000d1a:	4818      	ldr	r0, [pc, #96]	; (8000d7c <lcd_init+0x110>)
 8000d1c:	f000 fb26 	bl	800136c <GPIO_WritePin>

	//2. Do the LCD initialization
	mdelay(40);
 8000d20:	2028      	movs	r0, #40	; 0x28
 8000d22:	f000 f885 	bl	8000e30 <mdelay>

	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4814      	ldr	r0, [pc, #80]	; (8000d7c <lcd_init+0x110>)
 8000d2c:	f000 fb1e 	bl	800136c <GPIO_WritePin>
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2101      	movs	r1, #1
 8000d34:	4811      	ldr	r0, [pc, #68]	; (8000d7c <lcd_init+0x110>)
 8000d36:	f000 fb19 	bl	800136c <GPIO_WritePin>
	write_4_bits(0x3);
 8000d3a:	2003      	movs	r0, #3
 8000d3c:	f000 f820 	bl	8000d80 <write_4_bits>

	mdelay(5);
 8000d40:	2005      	movs	r0, #5
 8000d42:	f000 f875 	bl	8000e30 <mdelay>

	write_4_bits(0x3);
 8000d46:	2003      	movs	r0, #3
 8000d48:	f000 f81a 	bl	8000d80 <write_4_bits>

	udelay(150);
 8000d4c:	2096      	movs	r0, #150	; 0x96
 8000d4e:	f000 f888 	bl	8000e62 <udelay>

	write_4_bits(0x3);
 8000d52:	2003      	movs	r0, #3
 8000d54:	f000 f814 	bl	8000d80 <write_4_bits>

	write_4_bits(0x2);
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f000 f811 	bl	8000d80 <write_4_bits>

	//Function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 8000d5e:	2028      	movs	r0, #40	; 0x28
 8000d60:	f7ff ff2c 	bl	8000bbc <lcd_send_command>

	//Display and cursor ON
	lcd_send_command(LCD_CMD_DON_CURON);
 8000d64:	200e      	movs	r0, #14
 8000d66:	f7ff ff29 	bl	8000bbc <lcd_send_command>

	//Display clear
	lcd_display_clear();
 8000d6a:	f000 f857 	bl	8000e1c <lcd_display_clear>

	//Entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 8000d6e:	2006      	movs	r0, #6
 8000d70:	f7ff ff24 	bl	8000bbc <lcd_send_command>

}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40020800 	.word	0x40020800

08000d80 <write_4_bits>:

static void write_4_bits(uint8_t value)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D4, ( (value >> 0) & 0x1 ) );
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	2103      	movs	r1, #3
 8000d96:	4815      	ldr	r0, [pc, #84]	; (8000dec <write_4_bits+0x6c>)
 8000d98:	f000 fae8 	bl	800136c <GPIO_WritePin>
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D5, ( (value >> 1) & 0x1 ) );
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	085b      	lsrs	r3, r3, #1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	2104      	movs	r1, #4
 8000dac:	480f      	ldr	r0, [pc, #60]	; (8000dec <write_4_bits+0x6c>)
 8000dae:	f000 fadd 	bl	800136c <GPIO_WritePin>
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D6, ( (value >> 2) & 0x1 ) );
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	2105      	movs	r1, #5
 8000dc2:	480a      	ldr	r0, [pc, #40]	; (8000dec <write_4_bits+0x6c>)
 8000dc4:	f000 fad2 	bl	800136c <GPIO_WritePin>
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D7, ( (value >> 3) & 0x1 ) );
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	2106      	movs	r1, #6
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <write_4_bits+0x6c>)
 8000dda:	f000 fac7 	bl	800136c <GPIO_WritePin>

	lcd_enable();
 8000dde:	f000 f807 	bl	8000df0 <lcd_enable>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40020800 	.word	0x40020800

08000df0 <lcd_enable>:

static void lcd_enable(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2102      	movs	r1, #2
 8000df8:	4807      	ldr	r0, [pc, #28]	; (8000e18 <lcd_enable+0x28>)
 8000dfa:	f000 fab7 	bl	800136c <GPIO_WritePin>
	udelay(10);
 8000dfe:	200a      	movs	r0, #10
 8000e00:	f000 f82f 	bl	8000e62 <udelay>
	GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2102      	movs	r1, #2
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <lcd_enable+0x28>)
 8000e0a:	f000 faaf 	bl	800136c <GPIO_WritePin>
	udelay(100);
 8000e0e:	2064      	movs	r0, #100	; 0x64
 8000e10:	f000 f827 	bl	8000e62 <udelay>
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40020800 	.word	0x40020800

08000e1c <lcd_display_clear>:

void lcd_display_clear(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f7ff fecb 	bl	8000bbc <lcd_send_command>

	mdelay(2);
 8000e26:	2002      	movs	r0, #2
 8000e28:	f000 f802 	bl	8000e30 <mdelay>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <mdelay>:
		break;
	}
}

static void mdelay(uint32_t count)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < (count * 1000); i++);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	e002      	b.n	8000e44 <mdelay+0x14>
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	3301      	adds	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e4a:	fb02 f303 	mul.w	r3, r2, r3
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d3f4      	bcc.n	8000e3e <mdelay+0xe>
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <udelay>:

static void udelay(uint32_t count)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b085      	sub	sp, #20
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < (count * 1); i++);
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	e002      	b.n	8000e76 <udelay+0x14>
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	3301      	adds	r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d3f8      	bcc.n	8000e70 <udelay+0xe>
}
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <GPIO_Init>:
#include"STM32F446xx_GPIO_drivers.h"
#include<stdint.h>

void GPIO_Init(GPIO_Handle *pGPIOHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	GPIO_ClkCtrl(pGPIOHandle->pGPIO, ENABLE);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f996 	bl	80011cc <GPIO_ClkCtrl>

	// 1. Mode configuration
	uint32_t temp = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
	if(pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	795b      	ldrb	r3, [r3, #5]
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d821      	bhi.n	8000ef0 <GPIO_Init+0x64>
	{
		temp = (pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinMode << (2*pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	795b      	ldrb	r3, [r3, #5]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	791b      	ldrb	r3, [r3, #4]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIO->MODER &= ~(0x3 << pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	791b      	ldrb	r3, [r3, #4]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	2303      	movs	r3, #3
 8000ecc:	408b      	lsls	r3, r1
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	400a      	ands	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIO->MODER |= temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6819      	ldr	r1, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	69fa      	ldr	r2, [r7, #28]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e0c9      	b.n	8001084 <GPIO_Init+0x1f8>
	}else
	{
		if(pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinMode == GPIO_MODE_INT_FE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	795b      	ldrb	r3, [r3, #5]
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d117      	bne.n	8000f28 <GPIO_Init+0x9c>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber);
 8000ef8:	4b48      	ldr	r3, [pc, #288]	; (800101c <GPIO_Init+0x190>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	7912      	ldrb	r2, [r2, #4]
 8000f00:	4611      	mov	r1, r2
 8000f02:	2201      	movs	r2, #1
 8000f04:	408a      	lsls	r2, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	4a44      	ldr	r2, [pc, #272]	; (800101c <GPIO_Init+0x190>)
 8000f0a:	430b      	orrs	r3, r1
 8000f0c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber);
 8000f0e:	4b43      	ldr	r3, [pc, #268]	; (800101c <GPIO_Init+0x190>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	7912      	ldrb	r2, [r2, #4]
 8000f16:	4611      	mov	r1, r2
 8000f18:	2201      	movs	r2, #1
 8000f1a:	408a      	lsls	r2, r1
 8000f1c:	43d2      	mvns	r2, r2
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4a3e      	ldr	r2, [pc, #248]	; (800101c <GPIO_Init+0x190>)
 8000f22:	400b      	ands	r3, r1
 8000f24:	6093      	str	r3, [r2, #8]
 8000f26:	e035      	b.n	8000f94 <GPIO_Init+0x108>
		}else if(pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinMode == GPIO_MODE_INT_RE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	795b      	ldrb	r3, [r3, #5]
 8000f2c:	2b05      	cmp	r3, #5
 8000f2e:	d117      	bne.n	8000f60 <GPIO_Init+0xd4>
		{
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber);
 8000f30:	4b3a      	ldr	r3, [pc, #232]	; (800101c <GPIO_Init+0x190>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	7912      	ldrb	r2, [r2, #4]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	408a      	lsls	r2, r1
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4a36      	ldr	r2, [pc, #216]	; (800101c <GPIO_Init+0x190>)
 8000f42:	430b      	orrs	r3, r1
 8000f44:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber);
 8000f46:	4b35      	ldr	r3, [pc, #212]	; (800101c <GPIO_Init+0x190>)
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	7912      	ldrb	r2, [r2, #4]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	2201      	movs	r2, #1
 8000f52:	408a      	lsls	r2, r1
 8000f54:	43d2      	mvns	r2, r2
 8000f56:	4611      	mov	r1, r2
 8000f58:	4a30      	ldr	r2, [pc, #192]	; (800101c <GPIO_Init+0x190>)
 8000f5a:	400b      	ands	r3, r1
 8000f5c:	60d3      	str	r3, [r2, #12]
 8000f5e:	e019      	b.n	8000f94 <GPIO_Init+0x108>
		}else if(pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinMode == GPIO_MODE_INT_RF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	795b      	ldrb	r3, [r3, #5]
 8000f64:	2b06      	cmp	r3, #6
 8000f66:	d115      	bne.n	8000f94 <GPIO_Init+0x108>
		{
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber);
 8000f68:	4b2c      	ldr	r3, [pc, #176]	; (800101c <GPIO_Init+0x190>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	7912      	ldrb	r2, [r2, #4]
 8000f70:	4611      	mov	r1, r2
 8000f72:	2201      	movs	r2, #1
 8000f74:	408a      	lsls	r2, r1
 8000f76:	4611      	mov	r1, r2
 8000f78:	4a28      	ldr	r2, [pc, #160]	; (800101c <GPIO_Init+0x190>)
 8000f7a:	430b      	orrs	r3, r1
 8000f7c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber);
 8000f7e:	4b27      	ldr	r3, [pc, #156]	; (800101c <GPIO_Init+0x190>)
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	7912      	ldrb	r2, [r2, #4]
 8000f86:	4611      	mov	r1, r2
 8000f88:	2201      	movs	r2, #1
 8000f8a:	408a      	lsls	r2, r1
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4a23      	ldr	r2, [pc, #140]	; (800101c <GPIO_Init+0x190>)
 8000f90:	430b      	orrs	r3, r1
 8000f92:	60d3      	str	r3, [r2, #12]
		}

		uint32_t temp1 = pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber / 4;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	791b      	ldrb	r3, [r3, #4]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	61bb      	str	r3, [r7, #24]
		uint32_t temp2 = (pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber % 4)*4;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	791b      	ldrb	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	617b      	str	r3, [r7, #20]
		uint32_t PortCode = GPIO_BASE_ADDRESS_TO_CODE(pGPIOHandle->pGPIO);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <GPIO_Init+0x194>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d045      	beq.n	8001040 <GPIO_Init+0x1b4>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a1a      	ldr	r2, [pc, #104]	; (8001024 <GPIO_Init+0x198>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d02b      	beq.n	8001016 <GPIO_Init+0x18a>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a19      	ldr	r2, [pc, #100]	; (8001028 <GPIO_Init+0x19c>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d024      	beq.n	8001012 <GPIO_Init+0x186>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <GPIO_Init+0x1a0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d01d      	beq.n	800100e <GPIO_Init+0x182>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a16      	ldr	r2, [pc, #88]	; (8001030 <GPIO_Init+0x1a4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d016      	beq.n	800100a <GPIO_Init+0x17e>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <GPIO_Init+0x1a8>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d00f      	beq.n	8001006 <GPIO_Init+0x17a>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a13      	ldr	r2, [pc, #76]	; (8001038 <GPIO_Init+0x1ac>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d008      	beq.n	8001002 <GPIO_Init+0x176>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a11      	ldr	r2, [pc, #68]	; (800103c <GPIO_Init+0x1b0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d101      	bne.n	8000ffe <GPIO_Init+0x172>
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	e021      	b.n	8001042 <GPIO_Init+0x1b6>
 8000ffe:	2300      	movs	r3, #0
 8001000:	e01f      	b.n	8001042 <GPIO_Init+0x1b6>
 8001002:	2306      	movs	r3, #6
 8001004:	e01d      	b.n	8001042 <GPIO_Init+0x1b6>
 8001006:	2305      	movs	r3, #5
 8001008:	e01b      	b.n	8001042 <GPIO_Init+0x1b6>
 800100a:	2304      	movs	r3, #4
 800100c:	e019      	b.n	8001042 <GPIO_Init+0x1b6>
 800100e:	2303      	movs	r3, #3
 8001010:	e017      	b.n	8001042 <GPIO_Init+0x1b6>
 8001012:	2302      	movs	r3, #2
 8001014:	e015      	b.n	8001042 <GPIO_Init+0x1b6>
 8001016:	2301      	movs	r3, #1
 8001018:	e013      	b.n	8001042 <GPIO_Init+0x1b6>
 800101a:	bf00      	nop
 800101c:	40013c00 	.word	0x40013c00
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	40020800 	.word	0x40020800
 800102c:	40020c00 	.word	0x40020c00
 8001030:	40021000 	.word	0x40021000
 8001034:	40021400 	.word	0x40021400
 8001038:	40021800 	.word	0x40021800
 800103c:	40021c00 	.word	0x40021c00
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
		SYSCFG_CLOCK_ENABLE();
 8001044:	4b5e      	ldr	r3, [pc, #376]	; (80011c0 <GPIO_Init+0x334>)
 8001046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001048:	4a5d      	ldr	r2, [pc, #372]	; (80011c0 <GPIO_Init+0x334>)
 800104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (PortCode << temp2);
 8001050:	4a5c      	ldr	r2, [pc, #368]	; (80011c4 <GPIO_Init+0x338>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	3302      	adds	r3, #2
 8001056:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800105a:	6939      	ldr	r1, [r7, #16]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	4958      	ldr	r1, [pc, #352]	; (80011c4 <GPIO_Init+0x338>)
 8001064:	431a      	orrs	r2, r3
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	3302      	adds	r3, #2
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber);
 800106e:	4b56      	ldr	r3, [pc, #344]	; (80011c8 <GPIO_Init+0x33c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	7912      	ldrb	r2, [r2, #4]
 8001076:	4611      	mov	r1, r2
 8001078:	2201      	movs	r2, #1
 800107a:	408a      	lsls	r2, r1
 800107c:	4611      	mov	r1, r2
 800107e:	4a52      	ldr	r2, [pc, #328]	; (80011c8 <GPIO_Init+0x33c>)
 8001080:	430b      	orrs	r3, r1
 8001082:	6013      	str	r3, [r2, #0]

	}

	// 2. Speed configuration
	temp = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
	temp = (pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	799b      	ldrb	r3, [r3, #6]
 800108c:	461a      	mov	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	791b      	ldrb	r3, [r3, #4]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIO->OSPEEDER &= ~(0x3 << pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	791b      	ldrb	r3, [r3, #4]
 80010a4:	4619      	mov	r1, r3
 80010a6:	2303      	movs	r3, #3
 80010a8:	408b      	lsls	r3, r1
 80010aa:	43db      	mvns	r3, r3
 80010ac:	4619      	mov	r1, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	400a      	ands	r2, r1
 80010b4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIO->OSPEEDER |= temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6899      	ldr	r1, [r3, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	609a      	str	r2, [r3, #8]

	// 3. Pull-Up/Pull-Down configuration
	temp = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
	temp = (pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	79db      	ldrb	r3, [r3, #7]
 80010ce:	461a      	mov	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	791b      	ldrb	r3, [r3, #4]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIO->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	791b      	ldrb	r3, [r3, #4]
 80010e6:	4619      	mov	r1, r3
 80010e8:	2303      	movs	r3, #3
 80010ea:	408b      	lsls	r3, r1
 80010ec:	43db      	mvns	r3, r3
 80010ee:	4619      	mov	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	400a      	ands	r2, r1
 80010f6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIO->PUPDR |= temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68d9      	ldr	r1, [r3, #12]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	430a      	orrs	r2, r1
 8001106:	60da      	str	r2, [r3, #12]

	// 4. OPType configuration
	temp = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
	temp = (pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinOPType << (pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7a1b      	ldrb	r3, [r3, #8]
 8001110:	461a      	mov	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIO->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	791b      	ldrb	r3, [r3, #4]
 8001126:	4619      	mov	r1, r3
 8001128:	2301      	movs	r3, #1
 800112a:	408b      	lsls	r3, r1
 800112c:	43db      	mvns	r3, r3
 800112e:	4619      	mov	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	400a      	ands	r2, r1
 8001136:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIO->OTYPER |= temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6859      	ldr	r1, [r3, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	430a      	orrs	r2, r1
 8001146:	605a      	str	r2, [r3, #4]

	// 5. Alternate function configuration
	temp = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
	if(pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinMode == GPIO_MODE_ALT)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	795b      	ldrb	r3, [r3, #5]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d131      	bne.n	80011b8 <GPIO_Init+0x32c>
	{
		uint8_t temp1, temp2;
		temp1 = (pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber / 8);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	791b      	ldrb	r3, [r3, #4]
 8001158:	08db      	lsrs	r3, r3, #3
 800115a:	73fb      	strb	r3, [r7, #15]
		temp2 = (pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinNumber % 8);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	791b      	ldrb	r3, [r3, #4]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIO->AFR[temp1] &= ~(0xF << (4*temp2));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	3208      	adds	r2, #8
 800116e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	4618      	mov	r0, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	4001      	ands	r1, r0
 8001188:	3208      	adds	r2, #8
 800118a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIO->AFR[temp1] |= (pGPIOHandle->GPIO_PIN_CONFIG.GPIO_PinAltFunMode << (4*temp2));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	3208      	adds	r2, #8
 8001196:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7a5b      	ldrb	r3, [r3, #9]
 800119e:	461a      	mov	r2, r3
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	4301      	orrs	r1, r0
 80011b2:	3208      	adds	r2, #8
 80011b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40013800 	.word	0x40013800
 80011c8:	40013c00 	.word	0x40013c00

080011cc <GPIO_ClkCtrl>:
		GPIOH_RESET();
	}
}

void GPIO_ClkCtrl(GPIO_REGISTERS *pGPIOx, uint8_t ENorDIS)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
	if(ENorDIS == ENABLE)
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d157      	bne.n	800128e <GPIO_ClkCtrl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a59      	ldr	r2, [pc, #356]	; (8001348 <GPIO_ClkCtrl+0x17c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d106      	bne.n	80011f4 <GPIO_ClkCtrl+0x28>
		{
			GPIOA_CLOCK_ENABLE();
 80011e6:	4b59      	ldr	r3, [pc, #356]	; (800134c <GPIO_ClkCtrl+0x180>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a58      	ldr	r2, [pc, #352]	; (800134c <GPIO_ClkCtrl+0x180>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_CLOCK_DISABLE();
		}
	}
}
 80011f2:	e0a3      	b.n	800133c <GPIO_ClkCtrl+0x170>
		else if(pGPIOx == GPIOB)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a56      	ldr	r2, [pc, #344]	; (8001350 <GPIO_ClkCtrl+0x184>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d106      	bne.n	800120a <GPIO_ClkCtrl+0x3e>
			GPIOB_CLOCK_ENABLE();
 80011fc:	4b53      	ldr	r3, [pc, #332]	; (800134c <GPIO_ClkCtrl+0x180>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	4a52      	ldr	r2, [pc, #328]	; (800134c <GPIO_ClkCtrl+0x180>)
 8001202:	f043 0302 	orr.w	r3, r3, #2
 8001206:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001208:	e098      	b.n	800133c <GPIO_ClkCtrl+0x170>
		else if(pGPIOx == GPIOC)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a51      	ldr	r2, [pc, #324]	; (8001354 <GPIO_ClkCtrl+0x188>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d106      	bne.n	8001220 <GPIO_ClkCtrl+0x54>
			GPIOC_CLOCK_ENABLE();
 8001212:	4b4e      	ldr	r3, [pc, #312]	; (800134c <GPIO_ClkCtrl+0x180>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a4d      	ldr	r2, [pc, #308]	; (800134c <GPIO_ClkCtrl+0x180>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800121e:	e08d      	b.n	800133c <GPIO_ClkCtrl+0x170>
		else if(pGPIOx == GPIOD)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a4d      	ldr	r2, [pc, #308]	; (8001358 <GPIO_ClkCtrl+0x18c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d106      	bne.n	8001236 <GPIO_ClkCtrl+0x6a>
			GPIOD_CLOCK_ENABLE();
 8001228:	4b48      	ldr	r3, [pc, #288]	; (800134c <GPIO_ClkCtrl+0x180>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	4a47      	ldr	r2, [pc, #284]	; (800134c <GPIO_ClkCtrl+0x180>)
 800122e:	f043 0308 	orr.w	r3, r3, #8
 8001232:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001234:	e082      	b.n	800133c <GPIO_ClkCtrl+0x170>
		else if(pGPIOx == GPIOE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a48      	ldr	r2, [pc, #288]	; (800135c <GPIO_ClkCtrl+0x190>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d106      	bne.n	800124c <GPIO_ClkCtrl+0x80>
			GPIOE_CLOCK_ENABLE();
 800123e:	4b43      	ldr	r3, [pc, #268]	; (800134c <GPIO_ClkCtrl+0x180>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a42      	ldr	r2, [pc, #264]	; (800134c <GPIO_ClkCtrl+0x180>)
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
}
 800124a:	e077      	b.n	800133c <GPIO_ClkCtrl+0x170>
		else if(pGPIOx == GPIOF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a44      	ldr	r2, [pc, #272]	; (8001360 <GPIO_ClkCtrl+0x194>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d106      	bne.n	8001262 <GPIO_ClkCtrl+0x96>
			GPIOF_CLOCK_ENABLE();
 8001254:	4b3d      	ldr	r3, [pc, #244]	; (800134c <GPIO_ClkCtrl+0x180>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	4a3c      	ldr	r2, [pc, #240]	; (800134c <GPIO_ClkCtrl+0x180>)
 800125a:	f043 0320 	orr.w	r3, r3, #32
 800125e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001260:	e06c      	b.n	800133c <GPIO_ClkCtrl+0x170>
		else if(pGPIOx == GPIOG)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a3f      	ldr	r2, [pc, #252]	; (8001364 <GPIO_ClkCtrl+0x198>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d106      	bne.n	8001278 <GPIO_ClkCtrl+0xac>
			GPIOG_CLOCK_ENABLE();
 800126a:	4b38      	ldr	r3, [pc, #224]	; (800134c <GPIO_ClkCtrl+0x180>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a37      	ldr	r2, [pc, #220]	; (800134c <GPIO_ClkCtrl+0x180>)
 8001270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001276:	e061      	b.n	800133c <GPIO_ClkCtrl+0x170>
		else if(pGPIOx == GPIOH)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a3b      	ldr	r2, [pc, #236]	; (8001368 <GPIO_ClkCtrl+0x19c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d15d      	bne.n	800133c <GPIO_ClkCtrl+0x170>
			GPIOH_CLOCK_ENABLE();
 8001280:	4b32      	ldr	r3, [pc, #200]	; (800134c <GPIO_ClkCtrl+0x180>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	4a31      	ldr	r2, [pc, #196]	; (800134c <GPIO_ClkCtrl+0x180>)
 8001286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800128c:	e056      	b.n	800133c <GPIO_ClkCtrl+0x170>
		if(pGPIOx == GPIOA)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a2d      	ldr	r2, [pc, #180]	; (8001348 <GPIO_ClkCtrl+0x17c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d106      	bne.n	80012a4 <GPIO_ClkCtrl+0xd8>
			GPIOA_CLOCK_DISABLE();
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <GPIO_ClkCtrl+0x180>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a2c      	ldr	r2, [pc, #176]	; (800134c <GPIO_ClkCtrl+0x180>)
 800129c:	f023 0301 	bic.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012a2:	e04b      	b.n	800133c <GPIO_ClkCtrl+0x170>
		else if(pGPIOx == GPIOB)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a2a      	ldr	r2, [pc, #168]	; (8001350 <GPIO_ClkCtrl+0x184>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d106      	bne.n	80012ba <GPIO_ClkCtrl+0xee>
			GPIOB_CLOCK_DISABLE();
 80012ac:	4b27      	ldr	r3, [pc, #156]	; (800134c <GPIO_ClkCtrl+0x180>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4a26      	ldr	r2, [pc, #152]	; (800134c <GPIO_ClkCtrl+0x180>)
 80012b2:	f023 0302 	bic.w	r3, r3, #2
 80012b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012b8:	e040      	b.n	800133c <GPIO_ClkCtrl+0x170>
		else if(pGPIOx == GPIOC)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a25      	ldr	r2, [pc, #148]	; (8001354 <GPIO_ClkCtrl+0x188>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d106      	bne.n	80012d0 <GPIO_ClkCtrl+0x104>
			GPIOC_CLOCK_DISABLE();
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <GPIO_ClkCtrl+0x180>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a21      	ldr	r2, [pc, #132]	; (800134c <GPIO_ClkCtrl+0x180>)
 80012c8:	f023 0304 	bic.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012ce:	e035      	b.n	800133c <GPIO_ClkCtrl+0x170>
		else if(pGPIOx == GPIOD)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a21      	ldr	r2, [pc, #132]	; (8001358 <GPIO_ClkCtrl+0x18c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d106      	bne.n	80012e6 <GPIO_ClkCtrl+0x11a>
			GPIOD_CLOCK_DISABLE();
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <GPIO_ClkCtrl+0x180>)
 80012da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <GPIO_ClkCtrl+0x180>)
 80012de:	f023 0308 	bic.w	r3, r3, #8
 80012e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012e4:	e02a      	b.n	800133c <GPIO_ClkCtrl+0x170>
		else if(pGPIOx == GPIOE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a1c      	ldr	r2, [pc, #112]	; (800135c <GPIO_ClkCtrl+0x190>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d106      	bne.n	80012fc <GPIO_ClkCtrl+0x130>
			GPIOE_CLOCK_DISABLE();
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <GPIO_ClkCtrl+0x180>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a16      	ldr	r2, [pc, #88]	; (800134c <GPIO_ClkCtrl+0x180>)
 80012f4:	f023 0310 	bic.w	r3, r3, #16
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012fa:	e01f      	b.n	800133c <GPIO_ClkCtrl+0x170>
		else if(pGPIOx == GPIOF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a18      	ldr	r2, [pc, #96]	; (8001360 <GPIO_ClkCtrl+0x194>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d106      	bne.n	8001312 <GPIO_ClkCtrl+0x146>
			GPIOF_CLOCK_DISABLE();
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <GPIO_ClkCtrl+0x180>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	4a10      	ldr	r2, [pc, #64]	; (800134c <GPIO_ClkCtrl+0x180>)
 800130a:	f023 0320 	bic.w	r3, r3, #32
 800130e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001310:	e014      	b.n	800133c <GPIO_ClkCtrl+0x170>
		else if(pGPIOx == GPIOG)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a13      	ldr	r2, [pc, #76]	; (8001364 <GPIO_ClkCtrl+0x198>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d106      	bne.n	8001328 <GPIO_ClkCtrl+0x15c>
			GPIOG_CLOCK_DISABLE();
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <GPIO_ClkCtrl+0x180>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <GPIO_ClkCtrl+0x180>)
 8001320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001326:	e009      	b.n	800133c <GPIO_ClkCtrl+0x170>
		else if(pGPIOx == GPIOH)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <GPIO_ClkCtrl+0x19c>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d105      	bne.n	800133c <GPIO_ClkCtrl+0x170>
			GPIOH_CLOCK_DISABLE();
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <GPIO_ClkCtrl+0x180>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	4a05      	ldr	r2, [pc, #20]	; (800134c <GPIO_ClkCtrl+0x180>)
 8001336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800133a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40020000 	.word	0x40020000
 800134c:	40023800 	.word	0x40023800
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40021400 	.word	0x40021400
 8001364:	40021800 	.word	0x40021800
 8001368:	40021c00 	.word	0x40021c00

0800136c <GPIO_WritePin>:
	value = (uint16_t)pGPIOx->IDR;
	return value;
}

void GPIO_WritePin(GPIO_REGISTERS *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
 8001378:	4613      	mov	r3, r2
 800137a:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 800137c:	78bb      	ldrb	r3, [r7, #2]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d109      	bne.n	8001396 <GPIO_WritePin+0x2a>
	{
		pGPIOx->ODR |= (1 << PinNumber);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	78fa      	ldrb	r2, [r7, #3]
 8001388:	2101      	movs	r1, #1
 800138a:	fa01 f202 	lsl.w	r2, r1, r2
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	615a      	str	r2, [r3, #20]
	}else
	{
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8001394:	e009      	b.n	80013aa <GPIO_WritePin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	78fa      	ldrb	r2, [r7, #3]
 800139c:	2101      	movs	r1, #1
 800139e:	fa01 f202 	lsl.w	r2, r1, r2
 80013a2:	43d2      	mvns	r2, r2
 80013a4:	401a      	ands	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	615a      	str	r2, [r3, #20]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <I2C_Init>:
static void I2C_ExecuteAddressPhase_Read(I2C_REGISTERS *pI2Cx, uint8_t SlaveAddress);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle *pI2CHandle);
static void I2C_MasterHandleTXEInterrupt(I2C_Handle *pI2CHandle);

void I2C_Init(I2C_Handle *pI2CHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]

	I2C_ClkCtrl(pI2CHandle->pI2Cx, ENABLE);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f8ae 	bl	800152c <I2C_ClkCtrl>

	// ACK Control
	temp |= (pI2CHandle->I2C_CONFIG.I2C_ACKControl << I2C_CR1_ACK);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7a5b      	ldrb	r3, [r3, #9]
 80013d4:	029b      	lsls	r3, r3, #10
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	601a      	str	r2, [r3, #0]

	// FREQ Control
	temp = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
	temp |= RCC_GetPCLK1Value() / 1000000U;
 80013ea:	f000 faad 	bl	8001948 <RCC_GetPCLK1Value>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a47      	ldr	r2, [pc, #284]	; (8001510 <I2C_Init+0x158>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	0c9b      	lsrs	r3, r3, #18
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (temp & 0x3F);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001408:	605a      	str	r2, [r3, #4]

	// Address Control
	temp = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
	temp |= (pI2CHandle->I2C_CONFIG.I2C_DeviceAddress << 1);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7a1b      	ldrb	r3, [r3, #8]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	461a      	mov	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]
	temp |= (1 << 14);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001422:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	609a      	str	r2, [r3, #8]

	// CCR calculations
	uint16_t ccr_value = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	817b      	strh	r3, [r7, #10]
	temp = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_CONFIG.I2C_SCLSpeed <= I2C_SPEED_SM)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4a36      	ldr	r2, [pc, #216]	; (8001514 <I2C_Init+0x15c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d80f      	bhi.n	800145e <I2C_Init+0xa6>
	{
		ccr_value = RCC_GetPCLK1Value() / (2*pI2CHandle->I2C_CONFIG.I2C_SCLSpeed);
 800143e:	f000 fa83 	bl	8001948 <RCC_GetPCLK1Value>
 8001442:	4602      	mov	r2, r0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	817b      	strh	r3, [r7, #10]
		temp |= (ccr_value & 0xFFF);
 8001450:	897b      	ldrh	r3, [r7, #10]
 8001452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	e02d      	b.n	80014ba <I2C_Init+0x102>
	}else
	{
		temp |= (1 << I2C_CCR_FS);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001464:	60fb      	str	r3, [r7, #12]
		temp |= (pI2CHandle->I2C_CONFIG.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	895b      	ldrh	r3, [r3, #10]
 800146a:	039b      	lsls	r3, r3, #14
 800146c:	461a      	mov	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_CONFIG.I2C_FMDutyCycle == I2C_DUTY_2)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	895b      	ldrh	r3, [r3, #10]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10b      	bne.n	8001494 <I2C_Init+0xdc>
		{
			ccr_value = RCC_GetPCLK1Value() / (3*pI2CHandle->I2C_CONFIG.I2C_SCLSpeed);
 800147c:	f000 fa64 	bl	8001948 <RCC_GetPCLK1Value>
 8001480:	4601      	mov	r1, r0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001490:	817b      	strh	r3, [r7, #10]
 8001492:	e00c      	b.n	80014ae <I2C_Init+0xf6>
		}else
		{
			ccr_value = RCC_GetPCLK1Value() / (25*pI2CHandle->I2C_CONFIG.I2C_SCLSpeed);
 8001494:	f000 fa58 	bl	8001948 <RCC_GetPCLK1Value>
 8001498:	4601      	mov	r1, r0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	009a      	lsls	r2, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ac:	817b      	strh	r3, [r7, #10]
		}
		temp |= (ccr_value & 0xFFF);
 80014ae:	897b      	ldrh	r3, [r7, #10]
 80014b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	61da      	str	r2, [r3, #28]

	// TRISE Configuration
	if(pI2CHandle->I2C_CONFIG.I2C_SCLSpeed <= I2C_SPEED_SM)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <I2C_Init+0x15c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d809      	bhi.n	80014e0 <I2C_Init+0x128>
		{
			temp = (RCC_GetPCLK1Value() / 1000000U) + 1;
 80014cc:	f000 fa3c 	bl	8001948 <RCC_GetPCLK1Value>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <I2C_Init+0x158>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	0c9b      	lsrs	r3, r3, #18
 80014da:	3301      	adds	r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	e00d      	b.n	80014fc <I2C_Init+0x144>
		}else
		{
			temp = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 80014e0:	f000 fa32 	bl	8001948 <RCC_GetPCLK1Value>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	0a5b      	lsrs	r3, r3, #9
 80014f0:	4a09      	ldr	r2, [pc, #36]	; (8001518 <I2C_Init+0x160>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	09db      	lsrs	r3, r3, #7
 80014f8:	3301      	adds	r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
		}
	pI2CHandle->pI2Cx->TRISE = (temp & 0x3F);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001506:	621a      	str	r2, [r3, #32]
}
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	431bde83 	.word	0x431bde83
 8001514:	000186a0 	.word	0x000186a0
 8001518:	00044b83 	.word	0x00044b83

0800151c <RCC_GetPLLClock>:


uint32_t RCC_GetPLLClock()
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
	return 0;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <I2C_ClkCtrl>:
{

}

void I2C_ClkCtrl(I2C_REGISTERS *pI2Cx, uint8_t ENorDIS)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
	if(ENorDIS == ENABLE)
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d120      	bne.n	8001580 <I2C_ClkCtrl+0x54>
	{
		if(pI2Cx == I2C1)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a22      	ldr	r2, [pc, #136]	; (80015cc <I2C_ClkCtrl+0xa0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d106      	bne.n	8001554 <I2C_ClkCtrl+0x28>
		{
			I2C1_CLOCK_ENABLE();
 8001546:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <I2C_ClkCtrl+0xa4>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <I2C_ClkCtrl+0xa4>)
 800154c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_CLOCK_DISABLE();
		}
	}
}
 8001552:	e035      	b.n	80015c0 <I2C_ClkCtrl+0x94>
		else if(pI2Cx == I2C2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a1f      	ldr	r2, [pc, #124]	; (80015d4 <I2C_ClkCtrl+0xa8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d106      	bne.n	800156a <I2C_ClkCtrl+0x3e>
			I2C2_CLOCK_ENABLE();
 800155c:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <I2C_ClkCtrl+0xa4>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <I2C_ClkCtrl+0xa4>)
 8001562:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001566:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001568:	e02a      	b.n	80015c0 <I2C_ClkCtrl+0x94>
		else if(pI2Cx == I2C3)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <I2C_ClkCtrl+0xac>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d126      	bne.n	80015c0 <I2C_ClkCtrl+0x94>
			I2C3_CLOCK_ENABLE();
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <I2C_ClkCtrl+0xa4>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <I2C_ClkCtrl+0xa4>)
 8001578:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800157e:	e01f      	b.n	80015c0 <I2C_ClkCtrl+0x94>
		if(pI2Cx == I2C1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <I2C_ClkCtrl+0xa0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d106      	bne.n	8001596 <I2C_ClkCtrl+0x6a>
			I2C1_CLOCK_DISABLE();
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <I2C_ClkCtrl+0xa4>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <I2C_ClkCtrl+0xa4>)
 800158e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001594:	e014      	b.n	80015c0 <I2C_ClkCtrl+0x94>
		else if(pI2Cx == I2C2)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <I2C_ClkCtrl+0xa8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d106      	bne.n	80015ac <I2C_ClkCtrl+0x80>
			I2C2_CLOCK_DISABLE();
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <I2C_ClkCtrl+0xa4>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <I2C_ClkCtrl+0xa4>)
 80015a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80015aa:	e009      	b.n	80015c0 <I2C_ClkCtrl+0x94>
		else if(pI2Cx == I2C3)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <I2C_ClkCtrl+0xac>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d105      	bne.n	80015c0 <I2C_ClkCtrl+0x94>
			I2C3_CLOCK_DISABLE();
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <I2C_ClkCtrl+0xa4>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <I2C_ClkCtrl+0xa4>)
 80015ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015be:	6413      	str	r3, [r2, #64]	; 0x40
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40005400 	.word	0x40005400
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40005800 	.word	0x40005800
 80015d8:	40005c00 	.word	0x40005c00

080015dc <I2C_PeripheralControl>:
	uint8_t iprx_section = (IRQNumber%4)*8;
	*(NVIC_IPR_BASE_ADDRESS + iprx) |= (IRQPriority << (iprx_section - 4));
}

void I2C_PeripheralControl(I2C_REGISTERS *pI2Cx, uint8_t ENorDIS)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70fb      	strb	r3, [r7, #3]
	if(ENorDIS == ENABLE)
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d106      	bne.n	80015fc <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f043 0201 	orr.w	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 80015fa:	e005      	b.n	8001608 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 0201 	bic.w	r2, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	601a      	str	r2, [r3, #0]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <I2C_GetFlagStatus>:

uint8_t I2C_GetFlagStatus(I2C_REGISTERS *pI2Cx, uint32_t FlagName)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	4013      	ands	r3, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <I2C_MasterSendData>:
{

}

void I2C_MasterSendData(I2C_Handle *pI2CHandle, uint8_t *pTxBuffer, uint8_t Length, uint8_t SlaveAddress, uint8_t Sr)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	4611      	mov	r1, r2
 8001648:	461a      	mov	r2, r3
 800164a:	460b      	mov	r3, r1
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	4613      	mov	r3, r2
 8001650:	71bb      	strb	r3, [r7, #6]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 f857 	bl	800170a <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completed by checking the SB flag from SR1 register
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 800165c:	bf00      	nop
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2101      	movs	r1, #1
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ffd5 	bl	8001614 <I2C_GetFlagStatus>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f6      	beq.n	800165e <I2C_MasterSendData+0x22>

	//3. Send the address of the slave with R/nW bit set (1 to read / 0 to write)
	I2C_ExecuteAddressPhase_Write(pI2CHandle->pI2Cx, SlaveAddress);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	79ba      	ldrb	r2, [r7, #6]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f000 f856 	bl	800172a <I2C_ExecuteAddressPhase_Write>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 800167e:	bf00      	nop
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2102      	movs	r1, #2
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ffc4 	bl	8001614 <I2C_GetFlagStatus>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f6      	beq.n	8001680 <I2C_MasterSendData+0x44>

	//5. Clear the ADDR flag according to its software sequence
	I2C_ClearADDRFlag(pI2CHandle);
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 f85f 	bl	8001756 <I2C_ClearADDRFlag>

	//6. Send the data until length becomes 0
	while(Length > 0)
 8001698:	e014      	b.n	80016c4 <I2C_MasterSendData+0x88>
	{
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TXE_FLAG));
 800169a:	bf00      	nop
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ffb6 	bl	8001614 <I2C_GetFlagStatus>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f6      	beq.n	800169c <I2C_MasterSendData+0x60>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	781a      	ldrb	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	3301      	adds	r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
		Length--;
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	71fb      	strb	r3, [r7, #7]
	while(Length > 0)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1e7      	bne.n	800169a <I2C_MasterSendData+0x5e>
	}

	//7. When Length becomes 0 wait for TXE=1 and BTF=1 before generating the stop condition
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TXE_FLAG));
 80016ca:	bf00      	nop
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2180      	movs	r1, #128	; 0x80
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff9e 	bl	8001614 <I2C_GetFlagStatus>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f6      	beq.n	80016cc <I2C_MasterSendData+0x90>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG));
 80016de:	bf00      	nop
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2104      	movs	r1, #4
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff94 	bl	8001614 <I2C_GetFlagStatus>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f6      	beq.n	80016e0 <I2C_MasterSendData+0xa4>

	//8. Generate the STOP condition
	if(Sr == I2C_NO_SR)
 80016f2:	7e3b      	ldrb	r3, [r7, #24]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d104      	bne.n	8001702 <I2C_MasterSendData+0xc6>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 f865 	bl	80017cc <I2C_GenerateStopCondition>
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <I2C_GenerateStartCondition>:

static void I2C_GenerateStartCondition(I2C_REGISTERS *pI2Cx)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	601a      	str	r2, [r3, #0]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <I2C_ExecuteAddressPhase_Write>:

static void I2C_ExecuteAddressPhase_Write(I2C_REGISTERS *pI2Cx, uint8_t SlaveAddress)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	70fb      	strb	r3, [r7, #3]
	SlaveAddress = SlaveAddress << 1;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	70fb      	strb	r3, [r7, #3]
	SlaveAddress &= ~(1);
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddress;
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	611a      	str	r2, [r3, #16]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle *pI2CHandle)
{
 8001756:	b480      	push	{r7}
 8001758:	b085      	sub	sp, #20
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;

	//Check for device mode
	if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d021      	beq.n	80017b0 <I2C_ClearADDRFlag+0x5a>
	{
		if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX )
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7f1b      	ldrb	r3, [r3, #28]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d114      	bne.n	800179e <I2C_ClearADDRFlag+0x48>
		{
			if (pI2CHandle->RxSize == 1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d121      	bne.n	80017c0 <I2C_ClearADDRFlag+0x6a>
			{
				//First disable the ACK
				pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800178a:	601a      	str	r2, [r3, #0]

				//Clear the ADDR flag
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	60fb      	str	r3, [r7, #12]
		//Clear the ADDR flag
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}
}
 800179c:	e010      	b.n	80017c0 <I2C_ClearADDRFlag+0x6a>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	60fb      	str	r3, [r7, #12]
}
 80017ae:	e007      	b.n	80017c0 <I2C_ClearADDRFlag+0x6a>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	60fb      	str	r3, [r7, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_REGISTERS *pI2Cx)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	601a      	str	r2, [r3, #0]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle *pI2CHandle, uint8_t *pRxBuffer, uint8_t Length, uint8_t SlaveAddress, uint8_t Sr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	4611      	mov	r1, r2
 80017f8:	461a      	mov	r2, r3
 80017fa:	460b      	mov	r3, r1
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	4613      	mov	r3, r2
 8001800:	71bb      	strb	r3, [r7, #6]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ff7f 	bl	800170a <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completed by checking the SB flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 800180c:	bf00      	nop
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2101      	movs	r1, #1
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fefd 	bl	8001614 <I2C_GetFlagStatus>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f6      	beq.n	800180e <I2C_MasterReceiveData+0x22>

	//3. Send the address of the slave with R/nW bit set (1 to read / 0 to write)
	I2C_ExecuteAddressPhase_Read(pI2CHandle->pI2Cx, SlaveAddress);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	79ba      	ldrb	r2, [r7, #6]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f000 f877 	bl	800191c <I2C_ExecuteAddressPhase_Read>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 800182e:	bf00      	nop
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2102      	movs	r1, #2
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff feec 	bl	8001614 <I2C_GetFlagStatus>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f6      	beq.n	8001830 <I2C_MasterReceiveData+0x44>

	//5.1 Procedure to read only 1 byte from slave
	if(Length == 1)
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d123      	bne.n	8001890 <I2C_MasterReceiveData+0xa4>
	{
		//Disable Acking
		pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001856:	601a      	str	r2, [r3, #0]

		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f7ff ff7c 	bl	8001756 <I2C_ClearADDRFlag>

		//Wait until RXNE becomes 1
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RXNE_FLAG));
 800185e:	bf00      	nop
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2140      	movs	r1, #64	; 0x40
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fed4 	bl	8001614 <I2C_GetFlagStatus>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f6      	beq.n	8001860 <I2C_MasterReceiveData+0x74>

		//Generate the STOP condition
		if(Sr == I2C_NO_SR)
 8001872:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d104      	bne.n	8001884 <I2C_MasterReceiveData+0x98>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ffa4 	bl	80017cc <I2C_GenerateStopCondition>

		//Read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	701a      	strb	r2, [r3, #0]
	}

	//5.2 Procedure to read data from slave when length > 1
	if(Length > 1)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d932      	bls.n	80018fc <I2C_MasterReceiveData+0x110>
	{
		//Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f7ff ff5d 	bl	8001756 <I2C_ClearADDRFlag>

		for(uint32_t i = Length; i > 0; i--)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e029      	b.n	80018f6 <I2C_MasterReceiveData+0x10a>
		{
			//Wait until RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RXNE_FLAG));
 80018a2:	bf00      	nop
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2140      	movs	r1, #64	; 0x40
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff feb2 	bl	8001614 <I2C_GetFlagStatus>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f6      	beq.n	80018a4 <I2C_MasterReceiveData+0xb8>

			if(i == 2)	//If last 2 bytes are remaining
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d110      	bne.n	80018de <I2C_MasterReceiveData+0xf2>
			{
				//Clear the ACK bit
				pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ca:	601a      	str	r2, [r3, #0]

				//Generate the STOP condition
				if(Sr == I2C_NO_SR)
 80018cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d104      	bne.n	80018de <I2C_MasterReceiveData+0xf2>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff77 	bl	80017cc <I2C_GenerateStopCondition>
			}

			//Read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	701a      	strb	r2, [r3, #0]

			//Next byte
			pRxBuffer++;
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	3301      	adds	r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Length; i > 0; i--)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1d2      	bne.n	80018a2 <I2C_MasterReceiveData+0xb6>
		}
	}

	//Re-enable acking
	if(pI2CHandle->I2C_CONFIG.I2C_ACKControl == I2C_ACK_ENABLE)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	7a5b      	ldrb	r3, [r3, #9]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d107      	bne.n	8001914 <I2C_MasterReceiveData+0x128>
	{
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001912:	601a      	str	r2, [r3, #0]
	}
}
 8001914:	bf00      	nop
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <I2C_ExecuteAddressPhase_Read>:

static void I2C_ExecuteAddressPhase_Read(I2C_REGISTERS *pI2Cx, uint8_t SlaveAddress)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	70fb      	strb	r3, [r7, #3]
	SlaveAddress = SlaveAddress << 1;
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	70fb      	strb	r3, [r7, #3]
	SlaveAddress |= 1;
 800192e:	78fb      	ldrb	r3, [r7, #3]
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddress;
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	611a      	str	r2, [r3, #16]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <RCC_GetPCLK1Value>:
uint16_t AHB_Prescaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_Prescaler[4] = {2,4,8,16};
uint8_t APB2_Prescaler[4] = {2,4,8,16};

uint32_t RCC_GetPCLK1Value(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clk_src, temp, ahbp, apb1p;

	clk_src = ((RCC->CFGR >> 2) & 0x3);
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <RCC_GetPCLK1Value+0x9c>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	727b      	strb	r3, [r7, #9]

	if(clk_src == 0)
 800195c:	7a7b      	ldrb	r3, [r7, #9]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <RCC_GetPCLK1Value+0xa0>)
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	e00b      	b.n	8001980 <RCC_GetPCLK1Value+0x38>
	}else if(clk_src == 1)
 8001968:	7a7b      	ldrb	r3, [r7, #9]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d102      	bne.n	8001974 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800196e:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <RCC_GetPCLK1Value+0xa4>)
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e005      	b.n	8001980 <RCC_GetPCLK1Value+0x38>
	}else if(clk_src == 2)
 8001974:	7a7b      	ldrb	r3, [r7, #9]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d102      	bne.n	8001980 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLClock();
 800197a:	f7ff fdcf 	bl	800151c <RCC_GetPLLClock>
 800197e:	60f8      	str	r0, [r7, #12]
	}

	temp = ((RCC->CFGR >> 4) & 0xF);
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <RCC_GetPCLK1Value+0x9c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	b2db      	uxtb	r3, r3
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 800198e:	7a3b      	ldrb	r3, [r7, #8]
 8001990:	2b07      	cmp	r3, #7
 8001992:	d802      	bhi.n	800199a <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8001994:	2301      	movs	r3, #1
 8001996:	72fb      	strb	r3, [r7, #11]
 8001998:	e005      	b.n	80019a6 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_Prescaler[temp-8];
 800199a:	7a3b      	ldrb	r3, [r7, #8]
 800199c:	3b08      	subs	r3, #8
 800199e:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <RCC_GetPCLK1Value+0xa8>)
 80019a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019a4:	72fb      	strb	r3, [r7, #11]
	}

	temp = ((RCC->CFGR >> 10) & 0x7);
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <RCC_GetPCLK1Value+0x9c>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	0a9b      	lsrs	r3, r3, #10
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 80019b4:	7a3b      	ldrb	r3, [r7, #8]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d802      	bhi.n	80019c0 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	72bb      	strb	r3, [r7, #10]
 80019be:	e004      	b.n	80019ca <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_Prescaler[temp-4];
 80019c0:	7a3b      	ldrb	r3, [r7, #8]
 80019c2:	3b04      	subs	r3, #4
 80019c4:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <RCC_GetPCLK1Value+0xac>)
 80019c6:	5cd3      	ldrb	r3, [r2, r3]
 80019c8:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = ((SystemClk/ahbp)/apb1p);
 80019ca:	7afb      	ldrb	r3, [r7, #11]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80019d2:	7abb      	ldrb	r3, [r7, #10]
 80019d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d8:	607b      	str	r3, [r7, #4]
	return pclk1;
 80019da:	687b      	ldr	r3, [r7, #4]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40023800 	.word	0x40023800
 80019e8:	00f42400 	.word	0x00f42400
 80019ec:	007a1200 	.word	0x007a1200
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000010 	.word	0x20000010

080019f8 <__errno>:
 80019f8:	4b01      	ldr	r3, [pc, #4]	; (8001a00 <__errno+0x8>)
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000014 	.word	0x20000014

08001a04 <__libc_init_array>:
 8001a04:	b570      	push	{r4, r5, r6, lr}
 8001a06:	4d0d      	ldr	r5, [pc, #52]	; (8001a3c <__libc_init_array+0x38>)
 8001a08:	4c0d      	ldr	r4, [pc, #52]	; (8001a40 <__libc_init_array+0x3c>)
 8001a0a:	1b64      	subs	r4, r4, r5
 8001a0c:	10a4      	asrs	r4, r4, #2
 8001a0e:	2600      	movs	r6, #0
 8001a10:	42a6      	cmp	r6, r4
 8001a12:	d109      	bne.n	8001a28 <__libc_init_array+0x24>
 8001a14:	4d0b      	ldr	r5, [pc, #44]	; (8001a44 <__libc_init_array+0x40>)
 8001a16:	4c0c      	ldr	r4, [pc, #48]	; (8001a48 <__libc_init_array+0x44>)
 8001a18:	f000 ffec 	bl	80029f4 <_init>
 8001a1c:	1b64      	subs	r4, r4, r5
 8001a1e:	10a4      	asrs	r4, r4, #2
 8001a20:	2600      	movs	r6, #0
 8001a22:	42a6      	cmp	r6, r4
 8001a24:	d105      	bne.n	8001a32 <__libc_init_array+0x2e>
 8001a26:	bd70      	pop	{r4, r5, r6, pc}
 8001a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a2c:	4798      	blx	r3
 8001a2e:	3601      	adds	r6, #1
 8001a30:	e7ee      	b.n	8001a10 <__libc_init_array+0xc>
 8001a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a36:	4798      	blx	r3
 8001a38:	3601      	adds	r6, #1
 8001a3a:	e7f2      	b.n	8001a22 <__libc_init_array+0x1e>
 8001a3c:	08002b7c 	.word	0x08002b7c
 8001a40:	08002b7c 	.word	0x08002b7c
 8001a44:	08002b7c 	.word	0x08002b7c
 8001a48:	08002b80 	.word	0x08002b80

08001a4c <memset>:
 8001a4c:	4402      	add	r2, r0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d100      	bne.n	8001a56 <memset+0xa>
 8001a54:	4770      	bx	lr
 8001a56:	f803 1b01 	strb.w	r1, [r3], #1
 8001a5a:	e7f9      	b.n	8001a50 <memset+0x4>

08001a5c <iprintf>:
 8001a5c:	b40f      	push	{r0, r1, r2, r3}
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <iprintf+0x2c>)
 8001a60:	b513      	push	{r0, r1, r4, lr}
 8001a62:	681c      	ldr	r4, [r3, #0]
 8001a64:	b124      	cbz	r4, 8001a70 <iprintf+0x14>
 8001a66:	69a3      	ldr	r3, [r4, #24]
 8001a68:	b913      	cbnz	r3, 8001a70 <iprintf+0x14>
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f000 fa5e 	bl	8001f2c <__sinit>
 8001a70:	ab05      	add	r3, sp, #20
 8001a72:	9a04      	ldr	r2, [sp, #16]
 8001a74:	68a1      	ldr	r1, [r4, #8]
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f000 fc2f 	bl	80022dc <_vfiprintf_r>
 8001a7e:	b002      	add	sp, #8
 8001a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a84:	b004      	add	sp, #16
 8001a86:	4770      	bx	lr
 8001a88:	20000014 	.word	0x20000014

08001a8c <_puts_r>:
 8001a8c:	b570      	push	{r4, r5, r6, lr}
 8001a8e:	460e      	mov	r6, r1
 8001a90:	4605      	mov	r5, r0
 8001a92:	b118      	cbz	r0, 8001a9c <_puts_r+0x10>
 8001a94:	6983      	ldr	r3, [r0, #24]
 8001a96:	b90b      	cbnz	r3, 8001a9c <_puts_r+0x10>
 8001a98:	f000 fa48 	bl	8001f2c <__sinit>
 8001a9c:	69ab      	ldr	r3, [r5, #24]
 8001a9e:	68ac      	ldr	r4, [r5, #8]
 8001aa0:	b913      	cbnz	r3, 8001aa8 <_puts_r+0x1c>
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	f000 fa42 	bl	8001f2c <__sinit>
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <_puts_r+0xd0>)
 8001aaa:	429c      	cmp	r4, r3
 8001aac:	d120      	bne.n	8001af0 <_puts_r+0x64>
 8001aae:	686c      	ldr	r4, [r5, #4]
 8001ab0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ab2:	07db      	lsls	r3, r3, #31
 8001ab4:	d405      	bmi.n	8001ac2 <_puts_r+0x36>
 8001ab6:	89a3      	ldrh	r3, [r4, #12]
 8001ab8:	0598      	lsls	r0, r3, #22
 8001aba:	d402      	bmi.n	8001ac2 <_puts_r+0x36>
 8001abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001abe:	f000 fad3 	bl	8002068 <__retarget_lock_acquire_recursive>
 8001ac2:	89a3      	ldrh	r3, [r4, #12]
 8001ac4:	0719      	lsls	r1, r3, #28
 8001ac6:	d51d      	bpl.n	8001b04 <_puts_r+0x78>
 8001ac8:	6923      	ldr	r3, [r4, #16]
 8001aca:	b1db      	cbz	r3, 8001b04 <_puts_r+0x78>
 8001acc:	3e01      	subs	r6, #1
 8001ace:	68a3      	ldr	r3, [r4, #8]
 8001ad0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	60a3      	str	r3, [r4, #8]
 8001ad8:	bb39      	cbnz	r1, 8001b2a <_puts_r+0x9e>
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da38      	bge.n	8001b50 <_puts_r+0xc4>
 8001ade:	4622      	mov	r2, r4
 8001ae0:	210a      	movs	r1, #10
 8001ae2:	4628      	mov	r0, r5
 8001ae4:	f000 f848 	bl	8001b78 <__swbuf_r>
 8001ae8:	3001      	adds	r0, #1
 8001aea:	d011      	beq.n	8001b10 <_puts_r+0x84>
 8001aec:	250a      	movs	r5, #10
 8001aee:	e011      	b.n	8001b14 <_puts_r+0x88>
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <_puts_r+0xd4>)
 8001af2:	429c      	cmp	r4, r3
 8001af4:	d101      	bne.n	8001afa <_puts_r+0x6e>
 8001af6:	68ac      	ldr	r4, [r5, #8]
 8001af8:	e7da      	b.n	8001ab0 <_puts_r+0x24>
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <_puts_r+0xd8>)
 8001afc:	429c      	cmp	r4, r3
 8001afe:	bf08      	it	eq
 8001b00:	68ec      	ldreq	r4, [r5, #12]
 8001b02:	e7d5      	b.n	8001ab0 <_puts_r+0x24>
 8001b04:	4621      	mov	r1, r4
 8001b06:	4628      	mov	r0, r5
 8001b08:	f000 f888 	bl	8001c1c <__swsetup_r>
 8001b0c:	2800      	cmp	r0, #0
 8001b0e:	d0dd      	beq.n	8001acc <_puts_r+0x40>
 8001b10:	f04f 35ff 	mov.w	r5, #4294967295
 8001b14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b16:	07da      	lsls	r2, r3, #31
 8001b18:	d405      	bmi.n	8001b26 <_puts_r+0x9a>
 8001b1a:	89a3      	ldrh	r3, [r4, #12]
 8001b1c:	059b      	lsls	r3, r3, #22
 8001b1e:	d402      	bmi.n	8001b26 <_puts_r+0x9a>
 8001b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b22:	f000 faa2 	bl	800206a <__retarget_lock_release_recursive>
 8001b26:	4628      	mov	r0, r5
 8001b28:	bd70      	pop	{r4, r5, r6, pc}
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	da04      	bge.n	8001b38 <_puts_r+0xac>
 8001b2e:	69a2      	ldr	r2, [r4, #24]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	dc06      	bgt.n	8001b42 <_puts_r+0xb6>
 8001b34:	290a      	cmp	r1, #10
 8001b36:	d004      	beq.n	8001b42 <_puts_r+0xb6>
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	6022      	str	r2, [r4, #0]
 8001b3e:	7019      	strb	r1, [r3, #0]
 8001b40:	e7c5      	b.n	8001ace <_puts_r+0x42>
 8001b42:	4622      	mov	r2, r4
 8001b44:	4628      	mov	r0, r5
 8001b46:	f000 f817 	bl	8001b78 <__swbuf_r>
 8001b4a:	3001      	adds	r0, #1
 8001b4c:	d1bf      	bne.n	8001ace <_puts_r+0x42>
 8001b4e:	e7df      	b.n	8001b10 <_puts_r+0x84>
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	250a      	movs	r5, #10
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	6022      	str	r2, [r4, #0]
 8001b58:	701d      	strb	r5, [r3, #0]
 8001b5a:	e7db      	b.n	8001b14 <_puts_r+0x88>
 8001b5c:	08002b08 	.word	0x08002b08
 8001b60:	08002b28 	.word	0x08002b28
 8001b64:	08002ae8 	.word	0x08002ae8

08001b68 <puts>:
 8001b68:	4b02      	ldr	r3, [pc, #8]	; (8001b74 <puts+0xc>)
 8001b6a:	4601      	mov	r1, r0
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	f7ff bf8d 	b.w	8001a8c <_puts_r>
 8001b72:	bf00      	nop
 8001b74:	20000014 	.word	0x20000014

08001b78 <__swbuf_r>:
 8001b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7a:	460e      	mov	r6, r1
 8001b7c:	4614      	mov	r4, r2
 8001b7e:	4605      	mov	r5, r0
 8001b80:	b118      	cbz	r0, 8001b8a <__swbuf_r+0x12>
 8001b82:	6983      	ldr	r3, [r0, #24]
 8001b84:	b90b      	cbnz	r3, 8001b8a <__swbuf_r+0x12>
 8001b86:	f000 f9d1 	bl	8001f2c <__sinit>
 8001b8a:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <__swbuf_r+0x98>)
 8001b8c:	429c      	cmp	r4, r3
 8001b8e:	d12b      	bne.n	8001be8 <__swbuf_r+0x70>
 8001b90:	686c      	ldr	r4, [r5, #4]
 8001b92:	69a3      	ldr	r3, [r4, #24]
 8001b94:	60a3      	str	r3, [r4, #8]
 8001b96:	89a3      	ldrh	r3, [r4, #12]
 8001b98:	071a      	lsls	r2, r3, #28
 8001b9a:	d52f      	bpl.n	8001bfc <__swbuf_r+0x84>
 8001b9c:	6923      	ldr	r3, [r4, #16]
 8001b9e:	b36b      	cbz	r3, 8001bfc <__swbuf_r+0x84>
 8001ba0:	6923      	ldr	r3, [r4, #16]
 8001ba2:	6820      	ldr	r0, [r4, #0]
 8001ba4:	1ac0      	subs	r0, r0, r3
 8001ba6:	6963      	ldr	r3, [r4, #20]
 8001ba8:	b2f6      	uxtb	r6, r6
 8001baa:	4283      	cmp	r3, r0
 8001bac:	4637      	mov	r7, r6
 8001bae:	dc04      	bgt.n	8001bba <__swbuf_r+0x42>
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	f000 f926 	bl	8001e04 <_fflush_r>
 8001bb8:	bb30      	cbnz	r0, 8001c08 <__swbuf_r+0x90>
 8001bba:	68a3      	ldr	r3, [r4, #8]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	60a3      	str	r3, [r4, #8]
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	6022      	str	r2, [r4, #0]
 8001bc6:	701e      	strb	r6, [r3, #0]
 8001bc8:	6963      	ldr	r3, [r4, #20]
 8001bca:	3001      	adds	r0, #1
 8001bcc:	4283      	cmp	r3, r0
 8001bce:	d004      	beq.n	8001bda <__swbuf_r+0x62>
 8001bd0:	89a3      	ldrh	r3, [r4, #12]
 8001bd2:	07db      	lsls	r3, r3, #31
 8001bd4:	d506      	bpl.n	8001be4 <__swbuf_r+0x6c>
 8001bd6:	2e0a      	cmp	r6, #10
 8001bd8:	d104      	bne.n	8001be4 <__swbuf_r+0x6c>
 8001bda:	4621      	mov	r1, r4
 8001bdc:	4628      	mov	r0, r5
 8001bde:	f000 f911 	bl	8001e04 <_fflush_r>
 8001be2:	b988      	cbnz	r0, 8001c08 <__swbuf_r+0x90>
 8001be4:	4638      	mov	r0, r7
 8001be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <__swbuf_r+0x9c>)
 8001bea:	429c      	cmp	r4, r3
 8001bec:	d101      	bne.n	8001bf2 <__swbuf_r+0x7a>
 8001bee:	68ac      	ldr	r4, [r5, #8]
 8001bf0:	e7cf      	b.n	8001b92 <__swbuf_r+0x1a>
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <__swbuf_r+0xa0>)
 8001bf4:	429c      	cmp	r4, r3
 8001bf6:	bf08      	it	eq
 8001bf8:	68ec      	ldreq	r4, [r5, #12]
 8001bfa:	e7ca      	b.n	8001b92 <__swbuf_r+0x1a>
 8001bfc:	4621      	mov	r1, r4
 8001bfe:	4628      	mov	r0, r5
 8001c00:	f000 f80c 	bl	8001c1c <__swsetup_r>
 8001c04:	2800      	cmp	r0, #0
 8001c06:	d0cb      	beq.n	8001ba0 <__swbuf_r+0x28>
 8001c08:	f04f 37ff 	mov.w	r7, #4294967295
 8001c0c:	e7ea      	b.n	8001be4 <__swbuf_r+0x6c>
 8001c0e:	bf00      	nop
 8001c10:	08002b08 	.word	0x08002b08
 8001c14:	08002b28 	.word	0x08002b28
 8001c18:	08002ae8 	.word	0x08002ae8

08001c1c <__swsetup_r>:
 8001c1c:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <__swsetup_r+0xcc>)
 8001c1e:	b570      	push	{r4, r5, r6, lr}
 8001c20:	681d      	ldr	r5, [r3, #0]
 8001c22:	4606      	mov	r6, r0
 8001c24:	460c      	mov	r4, r1
 8001c26:	b125      	cbz	r5, 8001c32 <__swsetup_r+0x16>
 8001c28:	69ab      	ldr	r3, [r5, #24]
 8001c2a:	b913      	cbnz	r3, 8001c32 <__swsetup_r+0x16>
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	f000 f97d 	bl	8001f2c <__sinit>
 8001c32:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <__swsetup_r+0xd0>)
 8001c34:	429c      	cmp	r4, r3
 8001c36:	d10f      	bne.n	8001c58 <__swsetup_r+0x3c>
 8001c38:	686c      	ldr	r4, [r5, #4]
 8001c3a:	89a3      	ldrh	r3, [r4, #12]
 8001c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c40:	0719      	lsls	r1, r3, #28
 8001c42:	d42c      	bmi.n	8001c9e <__swsetup_r+0x82>
 8001c44:	06dd      	lsls	r5, r3, #27
 8001c46:	d411      	bmi.n	8001c6c <__swsetup_r+0x50>
 8001c48:	2309      	movs	r3, #9
 8001c4a:	6033      	str	r3, [r6, #0]
 8001c4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c50:	81a3      	strh	r3, [r4, #12]
 8001c52:	f04f 30ff 	mov.w	r0, #4294967295
 8001c56:	e03e      	b.n	8001cd6 <__swsetup_r+0xba>
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <__swsetup_r+0xd4>)
 8001c5a:	429c      	cmp	r4, r3
 8001c5c:	d101      	bne.n	8001c62 <__swsetup_r+0x46>
 8001c5e:	68ac      	ldr	r4, [r5, #8]
 8001c60:	e7eb      	b.n	8001c3a <__swsetup_r+0x1e>
 8001c62:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <__swsetup_r+0xd8>)
 8001c64:	429c      	cmp	r4, r3
 8001c66:	bf08      	it	eq
 8001c68:	68ec      	ldreq	r4, [r5, #12]
 8001c6a:	e7e6      	b.n	8001c3a <__swsetup_r+0x1e>
 8001c6c:	0758      	lsls	r0, r3, #29
 8001c6e:	d512      	bpl.n	8001c96 <__swsetup_r+0x7a>
 8001c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c72:	b141      	cbz	r1, 8001c86 <__swsetup_r+0x6a>
 8001c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c78:	4299      	cmp	r1, r3
 8001c7a:	d002      	beq.n	8001c82 <__swsetup_r+0x66>
 8001c7c:	4630      	mov	r0, r6
 8001c7e:	f000 fa59 	bl	8002134 <_free_r>
 8001c82:	2300      	movs	r3, #0
 8001c84:	6363      	str	r3, [r4, #52]	; 0x34
 8001c86:	89a3      	ldrh	r3, [r4, #12]
 8001c88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c8c:	81a3      	strh	r3, [r4, #12]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	6063      	str	r3, [r4, #4]
 8001c92:	6923      	ldr	r3, [r4, #16]
 8001c94:	6023      	str	r3, [r4, #0]
 8001c96:	89a3      	ldrh	r3, [r4, #12]
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	81a3      	strh	r3, [r4, #12]
 8001c9e:	6923      	ldr	r3, [r4, #16]
 8001ca0:	b94b      	cbnz	r3, 8001cb6 <__swsetup_r+0x9a>
 8001ca2:	89a3      	ldrh	r3, [r4, #12]
 8001ca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cac:	d003      	beq.n	8001cb6 <__swsetup_r+0x9a>
 8001cae:	4621      	mov	r1, r4
 8001cb0:	4630      	mov	r0, r6
 8001cb2:	f000 f9ff 	bl	80020b4 <__smakebuf_r>
 8001cb6:	89a0      	ldrh	r0, [r4, #12]
 8001cb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001cbc:	f010 0301 	ands.w	r3, r0, #1
 8001cc0:	d00a      	beq.n	8001cd8 <__swsetup_r+0xbc>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60a3      	str	r3, [r4, #8]
 8001cc6:	6963      	ldr	r3, [r4, #20]
 8001cc8:	425b      	negs	r3, r3
 8001cca:	61a3      	str	r3, [r4, #24]
 8001ccc:	6923      	ldr	r3, [r4, #16]
 8001cce:	b943      	cbnz	r3, 8001ce2 <__swsetup_r+0xc6>
 8001cd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001cd4:	d1ba      	bne.n	8001c4c <__swsetup_r+0x30>
 8001cd6:	bd70      	pop	{r4, r5, r6, pc}
 8001cd8:	0781      	lsls	r1, r0, #30
 8001cda:	bf58      	it	pl
 8001cdc:	6963      	ldrpl	r3, [r4, #20]
 8001cde:	60a3      	str	r3, [r4, #8]
 8001ce0:	e7f4      	b.n	8001ccc <__swsetup_r+0xb0>
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	e7f7      	b.n	8001cd6 <__swsetup_r+0xba>
 8001ce6:	bf00      	nop
 8001ce8:	20000014 	.word	0x20000014
 8001cec:	08002b08 	.word	0x08002b08
 8001cf0:	08002b28 	.word	0x08002b28
 8001cf4:	08002ae8 	.word	0x08002ae8

08001cf8 <__sflush_r>:
 8001cf8:	898a      	ldrh	r2, [r1, #12]
 8001cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cfe:	4605      	mov	r5, r0
 8001d00:	0710      	lsls	r0, r2, #28
 8001d02:	460c      	mov	r4, r1
 8001d04:	d458      	bmi.n	8001db8 <__sflush_r+0xc0>
 8001d06:	684b      	ldr	r3, [r1, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	dc05      	bgt.n	8001d18 <__sflush_r+0x20>
 8001d0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	dc02      	bgt.n	8001d18 <__sflush_r+0x20>
 8001d12:	2000      	movs	r0, #0
 8001d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d1a:	2e00      	cmp	r6, #0
 8001d1c:	d0f9      	beq.n	8001d12 <__sflush_r+0x1a>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d24:	682f      	ldr	r7, [r5, #0]
 8001d26:	602b      	str	r3, [r5, #0]
 8001d28:	d032      	beq.n	8001d90 <__sflush_r+0x98>
 8001d2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d2c:	89a3      	ldrh	r3, [r4, #12]
 8001d2e:	075a      	lsls	r2, r3, #29
 8001d30:	d505      	bpl.n	8001d3e <__sflush_r+0x46>
 8001d32:	6863      	ldr	r3, [r4, #4]
 8001d34:	1ac0      	subs	r0, r0, r3
 8001d36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d38:	b10b      	cbz	r3, 8001d3e <__sflush_r+0x46>
 8001d3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d3c:	1ac0      	subs	r0, r0, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	4602      	mov	r2, r0
 8001d42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d44:	6a21      	ldr	r1, [r4, #32]
 8001d46:	4628      	mov	r0, r5
 8001d48:	47b0      	blx	r6
 8001d4a:	1c43      	adds	r3, r0, #1
 8001d4c:	89a3      	ldrh	r3, [r4, #12]
 8001d4e:	d106      	bne.n	8001d5e <__sflush_r+0x66>
 8001d50:	6829      	ldr	r1, [r5, #0]
 8001d52:	291d      	cmp	r1, #29
 8001d54:	d82c      	bhi.n	8001db0 <__sflush_r+0xb8>
 8001d56:	4a2a      	ldr	r2, [pc, #168]	; (8001e00 <__sflush_r+0x108>)
 8001d58:	40ca      	lsrs	r2, r1
 8001d5a:	07d6      	lsls	r6, r2, #31
 8001d5c:	d528      	bpl.n	8001db0 <__sflush_r+0xb8>
 8001d5e:	2200      	movs	r2, #0
 8001d60:	6062      	str	r2, [r4, #4]
 8001d62:	04d9      	lsls	r1, r3, #19
 8001d64:	6922      	ldr	r2, [r4, #16]
 8001d66:	6022      	str	r2, [r4, #0]
 8001d68:	d504      	bpl.n	8001d74 <__sflush_r+0x7c>
 8001d6a:	1c42      	adds	r2, r0, #1
 8001d6c:	d101      	bne.n	8001d72 <__sflush_r+0x7a>
 8001d6e:	682b      	ldr	r3, [r5, #0]
 8001d70:	b903      	cbnz	r3, 8001d74 <__sflush_r+0x7c>
 8001d72:	6560      	str	r0, [r4, #84]	; 0x54
 8001d74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d76:	602f      	str	r7, [r5, #0]
 8001d78:	2900      	cmp	r1, #0
 8001d7a:	d0ca      	beq.n	8001d12 <__sflush_r+0x1a>
 8001d7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d80:	4299      	cmp	r1, r3
 8001d82:	d002      	beq.n	8001d8a <__sflush_r+0x92>
 8001d84:	4628      	mov	r0, r5
 8001d86:	f000 f9d5 	bl	8002134 <_free_r>
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	6360      	str	r0, [r4, #52]	; 0x34
 8001d8e:	e7c1      	b.n	8001d14 <__sflush_r+0x1c>
 8001d90:	6a21      	ldr	r1, [r4, #32]
 8001d92:	2301      	movs	r3, #1
 8001d94:	4628      	mov	r0, r5
 8001d96:	47b0      	blx	r6
 8001d98:	1c41      	adds	r1, r0, #1
 8001d9a:	d1c7      	bne.n	8001d2c <__sflush_r+0x34>
 8001d9c:	682b      	ldr	r3, [r5, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0c4      	beq.n	8001d2c <__sflush_r+0x34>
 8001da2:	2b1d      	cmp	r3, #29
 8001da4:	d001      	beq.n	8001daa <__sflush_r+0xb2>
 8001da6:	2b16      	cmp	r3, #22
 8001da8:	d101      	bne.n	8001dae <__sflush_r+0xb6>
 8001daa:	602f      	str	r7, [r5, #0]
 8001dac:	e7b1      	b.n	8001d12 <__sflush_r+0x1a>
 8001dae:	89a3      	ldrh	r3, [r4, #12]
 8001db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001db4:	81a3      	strh	r3, [r4, #12]
 8001db6:	e7ad      	b.n	8001d14 <__sflush_r+0x1c>
 8001db8:	690f      	ldr	r7, [r1, #16]
 8001dba:	2f00      	cmp	r7, #0
 8001dbc:	d0a9      	beq.n	8001d12 <__sflush_r+0x1a>
 8001dbe:	0793      	lsls	r3, r2, #30
 8001dc0:	680e      	ldr	r6, [r1, #0]
 8001dc2:	bf08      	it	eq
 8001dc4:	694b      	ldreq	r3, [r1, #20]
 8001dc6:	600f      	str	r7, [r1, #0]
 8001dc8:	bf18      	it	ne
 8001dca:	2300      	movne	r3, #0
 8001dcc:	eba6 0807 	sub.w	r8, r6, r7
 8001dd0:	608b      	str	r3, [r1, #8]
 8001dd2:	f1b8 0f00 	cmp.w	r8, #0
 8001dd6:	dd9c      	ble.n	8001d12 <__sflush_r+0x1a>
 8001dd8:	6a21      	ldr	r1, [r4, #32]
 8001dda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001ddc:	4643      	mov	r3, r8
 8001dde:	463a      	mov	r2, r7
 8001de0:	4628      	mov	r0, r5
 8001de2:	47b0      	blx	r6
 8001de4:	2800      	cmp	r0, #0
 8001de6:	dc06      	bgt.n	8001df6 <__sflush_r+0xfe>
 8001de8:	89a3      	ldrh	r3, [r4, #12]
 8001dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dee:	81a3      	strh	r3, [r4, #12]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	e78e      	b.n	8001d14 <__sflush_r+0x1c>
 8001df6:	4407      	add	r7, r0
 8001df8:	eba8 0800 	sub.w	r8, r8, r0
 8001dfc:	e7e9      	b.n	8001dd2 <__sflush_r+0xda>
 8001dfe:	bf00      	nop
 8001e00:	20400001 	.word	0x20400001

08001e04 <_fflush_r>:
 8001e04:	b538      	push	{r3, r4, r5, lr}
 8001e06:	690b      	ldr	r3, [r1, #16]
 8001e08:	4605      	mov	r5, r0
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	b913      	cbnz	r3, 8001e14 <_fflush_r+0x10>
 8001e0e:	2500      	movs	r5, #0
 8001e10:	4628      	mov	r0, r5
 8001e12:	bd38      	pop	{r3, r4, r5, pc}
 8001e14:	b118      	cbz	r0, 8001e1e <_fflush_r+0x1a>
 8001e16:	6983      	ldr	r3, [r0, #24]
 8001e18:	b90b      	cbnz	r3, 8001e1e <_fflush_r+0x1a>
 8001e1a:	f000 f887 	bl	8001f2c <__sinit>
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <_fflush_r+0x6c>)
 8001e20:	429c      	cmp	r4, r3
 8001e22:	d11b      	bne.n	8001e5c <_fflush_r+0x58>
 8001e24:	686c      	ldr	r4, [r5, #4]
 8001e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0ef      	beq.n	8001e0e <_fflush_r+0xa>
 8001e2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e30:	07d0      	lsls	r0, r2, #31
 8001e32:	d404      	bmi.n	8001e3e <_fflush_r+0x3a>
 8001e34:	0599      	lsls	r1, r3, #22
 8001e36:	d402      	bmi.n	8001e3e <_fflush_r+0x3a>
 8001e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e3a:	f000 f915 	bl	8002068 <__retarget_lock_acquire_recursive>
 8001e3e:	4628      	mov	r0, r5
 8001e40:	4621      	mov	r1, r4
 8001e42:	f7ff ff59 	bl	8001cf8 <__sflush_r>
 8001e46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e48:	07da      	lsls	r2, r3, #31
 8001e4a:	4605      	mov	r5, r0
 8001e4c:	d4e0      	bmi.n	8001e10 <_fflush_r+0xc>
 8001e4e:	89a3      	ldrh	r3, [r4, #12]
 8001e50:	059b      	lsls	r3, r3, #22
 8001e52:	d4dd      	bmi.n	8001e10 <_fflush_r+0xc>
 8001e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e56:	f000 f908 	bl	800206a <__retarget_lock_release_recursive>
 8001e5a:	e7d9      	b.n	8001e10 <_fflush_r+0xc>
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <_fflush_r+0x70>)
 8001e5e:	429c      	cmp	r4, r3
 8001e60:	d101      	bne.n	8001e66 <_fflush_r+0x62>
 8001e62:	68ac      	ldr	r4, [r5, #8]
 8001e64:	e7df      	b.n	8001e26 <_fflush_r+0x22>
 8001e66:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <_fflush_r+0x74>)
 8001e68:	429c      	cmp	r4, r3
 8001e6a:	bf08      	it	eq
 8001e6c:	68ec      	ldreq	r4, [r5, #12]
 8001e6e:	e7da      	b.n	8001e26 <_fflush_r+0x22>
 8001e70:	08002b08 	.word	0x08002b08
 8001e74:	08002b28 	.word	0x08002b28
 8001e78:	08002ae8 	.word	0x08002ae8

08001e7c <std>:
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	b510      	push	{r4, lr}
 8001e80:	4604      	mov	r4, r0
 8001e82:	e9c0 3300 	strd	r3, r3, [r0]
 8001e86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e8a:	6083      	str	r3, [r0, #8]
 8001e8c:	8181      	strh	r1, [r0, #12]
 8001e8e:	6643      	str	r3, [r0, #100]	; 0x64
 8001e90:	81c2      	strh	r2, [r0, #14]
 8001e92:	6183      	str	r3, [r0, #24]
 8001e94:	4619      	mov	r1, r3
 8001e96:	2208      	movs	r2, #8
 8001e98:	305c      	adds	r0, #92	; 0x5c
 8001e9a:	f7ff fdd7 	bl	8001a4c <memset>
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <std+0x38>)
 8001ea0:	6263      	str	r3, [r4, #36]	; 0x24
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <std+0x3c>)
 8001ea4:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <std+0x40>)
 8001ea8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <std+0x44>)
 8001eac:	6224      	str	r4, [r4, #32]
 8001eae:	6323      	str	r3, [r4, #48]	; 0x30
 8001eb0:	bd10      	pop	{r4, pc}
 8001eb2:	bf00      	nop
 8001eb4:	08002885 	.word	0x08002885
 8001eb8:	080028a7 	.word	0x080028a7
 8001ebc:	080028df 	.word	0x080028df
 8001ec0:	08002903 	.word	0x08002903

08001ec4 <_cleanup_r>:
 8001ec4:	4901      	ldr	r1, [pc, #4]	; (8001ecc <_cleanup_r+0x8>)
 8001ec6:	f000 b8af 	b.w	8002028 <_fwalk_reent>
 8001eca:	bf00      	nop
 8001ecc:	08001e05 	.word	0x08001e05

08001ed0 <__sfmoreglue>:
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 8001ed2:	1e4a      	subs	r2, r1, #1
 8001ed4:	2568      	movs	r5, #104	; 0x68
 8001ed6:	4355      	muls	r5, r2
 8001ed8:	460e      	mov	r6, r1
 8001eda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ede:	f000 f979 	bl	80021d4 <_malloc_r>
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	b140      	cbz	r0, 8001ef8 <__sfmoreglue+0x28>
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	e9c0 1600 	strd	r1, r6, [r0]
 8001eec:	300c      	adds	r0, #12
 8001eee:	60a0      	str	r0, [r4, #8]
 8001ef0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ef4:	f7ff fdaa 	bl	8001a4c <memset>
 8001ef8:	4620      	mov	r0, r4
 8001efa:	bd70      	pop	{r4, r5, r6, pc}

08001efc <__sfp_lock_acquire>:
 8001efc:	4801      	ldr	r0, [pc, #4]	; (8001f04 <__sfp_lock_acquire+0x8>)
 8001efe:	f000 b8b3 	b.w	8002068 <__retarget_lock_acquire_recursive>
 8001f02:	bf00      	nop
 8001f04:	200000e8 	.word	0x200000e8

08001f08 <__sfp_lock_release>:
 8001f08:	4801      	ldr	r0, [pc, #4]	; (8001f10 <__sfp_lock_release+0x8>)
 8001f0a:	f000 b8ae 	b.w	800206a <__retarget_lock_release_recursive>
 8001f0e:	bf00      	nop
 8001f10:	200000e8 	.word	0x200000e8

08001f14 <__sinit_lock_acquire>:
 8001f14:	4801      	ldr	r0, [pc, #4]	; (8001f1c <__sinit_lock_acquire+0x8>)
 8001f16:	f000 b8a7 	b.w	8002068 <__retarget_lock_acquire_recursive>
 8001f1a:	bf00      	nop
 8001f1c:	200000e3 	.word	0x200000e3

08001f20 <__sinit_lock_release>:
 8001f20:	4801      	ldr	r0, [pc, #4]	; (8001f28 <__sinit_lock_release+0x8>)
 8001f22:	f000 b8a2 	b.w	800206a <__retarget_lock_release_recursive>
 8001f26:	bf00      	nop
 8001f28:	200000e3 	.word	0x200000e3

08001f2c <__sinit>:
 8001f2c:	b510      	push	{r4, lr}
 8001f2e:	4604      	mov	r4, r0
 8001f30:	f7ff fff0 	bl	8001f14 <__sinit_lock_acquire>
 8001f34:	69a3      	ldr	r3, [r4, #24]
 8001f36:	b11b      	cbz	r3, 8001f40 <__sinit+0x14>
 8001f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f3c:	f7ff bff0 	b.w	8001f20 <__sinit_lock_release>
 8001f40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f44:	6523      	str	r3, [r4, #80]	; 0x50
 8001f46:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <__sinit+0x68>)
 8001f48:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <__sinit+0x6c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f4e:	42a3      	cmp	r3, r4
 8001f50:	bf04      	itt	eq
 8001f52:	2301      	moveq	r3, #1
 8001f54:	61a3      	streq	r3, [r4, #24]
 8001f56:	4620      	mov	r0, r4
 8001f58:	f000 f820 	bl	8001f9c <__sfp>
 8001f5c:	6060      	str	r0, [r4, #4]
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f000 f81c 	bl	8001f9c <__sfp>
 8001f64:	60a0      	str	r0, [r4, #8]
 8001f66:	4620      	mov	r0, r4
 8001f68:	f000 f818 	bl	8001f9c <__sfp>
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60e0      	str	r0, [r4, #12]
 8001f70:	2104      	movs	r1, #4
 8001f72:	6860      	ldr	r0, [r4, #4]
 8001f74:	f7ff ff82 	bl	8001e7c <std>
 8001f78:	68a0      	ldr	r0, [r4, #8]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	2109      	movs	r1, #9
 8001f7e:	f7ff ff7d 	bl	8001e7c <std>
 8001f82:	68e0      	ldr	r0, [r4, #12]
 8001f84:	2202      	movs	r2, #2
 8001f86:	2112      	movs	r1, #18
 8001f88:	f7ff ff78 	bl	8001e7c <std>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	61a3      	str	r3, [r4, #24]
 8001f90:	e7d2      	b.n	8001f38 <__sinit+0xc>
 8001f92:	bf00      	nop
 8001f94:	08002ae4 	.word	0x08002ae4
 8001f98:	08001ec5 	.word	0x08001ec5

08001f9c <__sfp>:
 8001f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9e:	4607      	mov	r7, r0
 8001fa0:	f7ff ffac 	bl	8001efc <__sfp_lock_acquire>
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <__sfp+0x84>)
 8001fa6:	681e      	ldr	r6, [r3, #0]
 8001fa8:	69b3      	ldr	r3, [r6, #24]
 8001faa:	b913      	cbnz	r3, 8001fb2 <__sfp+0x16>
 8001fac:	4630      	mov	r0, r6
 8001fae:	f7ff ffbd 	bl	8001f2c <__sinit>
 8001fb2:	3648      	adds	r6, #72	; 0x48
 8001fb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	d503      	bpl.n	8001fc4 <__sfp+0x28>
 8001fbc:	6833      	ldr	r3, [r6, #0]
 8001fbe:	b30b      	cbz	r3, 8002004 <__sfp+0x68>
 8001fc0:	6836      	ldr	r6, [r6, #0]
 8001fc2:	e7f7      	b.n	8001fb4 <__sfp+0x18>
 8001fc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001fc8:	b9d5      	cbnz	r5, 8002000 <__sfp+0x64>
 8001fca:	4b16      	ldr	r3, [pc, #88]	; (8002024 <__sfp+0x88>)
 8001fcc:	60e3      	str	r3, [r4, #12]
 8001fce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001fd2:	6665      	str	r5, [r4, #100]	; 0x64
 8001fd4:	f000 f847 	bl	8002066 <__retarget_lock_init_recursive>
 8001fd8:	f7ff ff96 	bl	8001f08 <__sfp_lock_release>
 8001fdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001fe0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001fe4:	6025      	str	r5, [r4, #0]
 8001fe6:	61a5      	str	r5, [r4, #24]
 8001fe8:	2208      	movs	r2, #8
 8001fea:	4629      	mov	r1, r5
 8001fec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ff0:	f7ff fd2c 	bl	8001a4c <memset>
 8001ff4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001ff8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002000:	3468      	adds	r4, #104	; 0x68
 8002002:	e7d9      	b.n	8001fb8 <__sfp+0x1c>
 8002004:	2104      	movs	r1, #4
 8002006:	4638      	mov	r0, r7
 8002008:	f7ff ff62 	bl	8001ed0 <__sfmoreglue>
 800200c:	4604      	mov	r4, r0
 800200e:	6030      	str	r0, [r6, #0]
 8002010:	2800      	cmp	r0, #0
 8002012:	d1d5      	bne.n	8001fc0 <__sfp+0x24>
 8002014:	f7ff ff78 	bl	8001f08 <__sfp_lock_release>
 8002018:	230c      	movs	r3, #12
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	e7ee      	b.n	8001ffc <__sfp+0x60>
 800201e:	bf00      	nop
 8002020:	08002ae4 	.word	0x08002ae4
 8002024:	ffff0001 	.word	0xffff0001

08002028 <_fwalk_reent>:
 8002028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800202c:	4606      	mov	r6, r0
 800202e:	4688      	mov	r8, r1
 8002030:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002034:	2700      	movs	r7, #0
 8002036:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800203a:	f1b9 0901 	subs.w	r9, r9, #1
 800203e:	d505      	bpl.n	800204c <_fwalk_reent+0x24>
 8002040:	6824      	ldr	r4, [r4, #0]
 8002042:	2c00      	cmp	r4, #0
 8002044:	d1f7      	bne.n	8002036 <_fwalk_reent+0xe>
 8002046:	4638      	mov	r0, r7
 8002048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800204c:	89ab      	ldrh	r3, [r5, #12]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d907      	bls.n	8002062 <_fwalk_reent+0x3a>
 8002052:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002056:	3301      	adds	r3, #1
 8002058:	d003      	beq.n	8002062 <_fwalk_reent+0x3a>
 800205a:	4629      	mov	r1, r5
 800205c:	4630      	mov	r0, r6
 800205e:	47c0      	blx	r8
 8002060:	4307      	orrs	r7, r0
 8002062:	3568      	adds	r5, #104	; 0x68
 8002064:	e7e9      	b.n	800203a <_fwalk_reent+0x12>

08002066 <__retarget_lock_init_recursive>:
 8002066:	4770      	bx	lr

08002068 <__retarget_lock_acquire_recursive>:
 8002068:	4770      	bx	lr

0800206a <__retarget_lock_release_recursive>:
 800206a:	4770      	bx	lr

0800206c <__swhatbuf_r>:
 800206c:	b570      	push	{r4, r5, r6, lr}
 800206e:	460e      	mov	r6, r1
 8002070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002074:	2900      	cmp	r1, #0
 8002076:	b096      	sub	sp, #88	; 0x58
 8002078:	4614      	mov	r4, r2
 800207a:	461d      	mov	r5, r3
 800207c:	da07      	bge.n	800208e <__swhatbuf_r+0x22>
 800207e:	2300      	movs	r3, #0
 8002080:	602b      	str	r3, [r5, #0]
 8002082:	89b3      	ldrh	r3, [r6, #12]
 8002084:	061a      	lsls	r2, r3, #24
 8002086:	d410      	bmi.n	80020aa <__swhatbuf_r+0x3e>
 8002088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800208c:	e00e      	b.n	80020ac <__swhatbuf_r+0x40>
 800208e:	466a      	mov	r2, sp
 8002090:	f000 fc5e 	bl	8002950 <_fstat_r>
 8002094:	2800      	cmp	r0, #0
 8002096:	dbf2      	blt.n	800207e <__swhatbuf_r+0x12>
 8002098:	9a01      	ldr	r2, [sp, #4]
 800209a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800209e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020a2:	425a      	negs	r2, r3
 80020a4:	415a      	adcs	r2, r3
 80020a6:	602a      	str	r2, [r5, #0]
 80020a8:	e7ee      	b.n	8002088 <__swhatbuf_r+0x1c>
 80020aa:	2340      	movs	r3, #64	; 0x40
 80020ac:	2000      	movs	r0, #0
 80020ae:	6023      	str	r3, [r4, #0]
 80020b0:	b016      	add	sp, #88	; 0x58
 80020b2:	bd70      	pop	{r4, r5, r6, pc}

080020b4 <__smakebuf_r>:
 80020b4:	898b      	ldrh	r3, [r1, #12]
 80020b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020b8:	079d      	lsls	r5, r3, #30
 80020ba:	4606      	mov	r6, r0
 80020bc:	460c      	mov	r4, r1
 80020be:	d507      	bpl.n	80020d0 <__smakebuf_r+0x1c>
 80020c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020c4:	6023      	str	r3, [r4, #0]
 80020c6:	6123      	str	r3, [r4, #16]
 80020c8:	2301      	movs	r3, #1
 80020ca:	6163      	str	r3, [r4, #20]
 80020cc:	b002      	add	sp, #8
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
 80020d0:	ab01      	add	r3, sp, #4
 80020d2:	466a      	mov	r2, sp
 80020d4:	f7ff ffca 	bl	800206c <__swhatbuf_r>
 80020d8:	9900      	ldr	r1, [sp, #0]
 80020da:	4605      	mov	r5, r0
 80020dc:	4630      	mov	r0, r6
 80020de:	f000 f879 	bl	80021d4 <_malloc_r>
 80020e2:	b948      	cbnz	r0, 80020f8 <__smakebuf_r+0x44>
 80020e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020e8:	059a      	lsls	r2, r3, #22
 80020ea:	d4ef      	bmi.n	80020cc <__smakebuf_r+0x18>
 80020ec:	f023 0303 	bic.w	r3, r3, #3
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	81a3      	strh	r3, [r4, #12]
 80020f6:	e7e3      	b.n	80020c0 <__smakebuf_r+0xc>
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <__smakebuf_r+0x7c>)
 80020fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80020fc:	89a3      	ldrh	r3, [r4, #12]
 80020fe:	6020      	str	r0, [r4, #0]
 8002100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002104:	81a3      	strh	r3, [r4, #12]
 8002106:	9b00      	ldr	r3, [sp, #0]
 8002108:	6163      	str	r3, [r4, #20]
 800210a:	9b01      	ldr	r3, [sp, #4]
 800210c:	6120      	str	r0, [r4, #16]
 800210e:	b15b      	cbz	r3, 8002128 <__smakebuf_r+0x74>
 8002110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002114:	4630      	mov	r0, r6
 8002116:	f000 fc2d 	bl	8002974 <_isatty_r>
 800211a:	b128      	cbz	r0, 8002128 <__smakebuf_r+0x74>
 800211c:	89a3      	ldrh	r3, [r4, #12]
 800211e:	f023 0303 	bic.w	r3, r3, #3
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	81a3      	strh	r3, [r4, #12]
 8002128:	89a0      	ldrh	r0, [r4, #12]
 800212a:	4305      	orrs	r5, r0
 800212c:	81a5      	strh	r5, [r4, #12]
 800212e:	e7cd      	b.n	80020cc <__smakebuf_r+0x18>
 8002130:	08001ec5 	.word	0x08001ec5

08002134 <_free_r>:
 8002134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002136:	2900      	cmp	r1, #0
 8002138:	d048      	beq.n	80021cc <_free_r+0x98>
 800213a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800213e:	9001      	str	r0, [sp, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	f1a1 0404 	sub.w	r4, r1, #4
 8002146:	bfb8      	it	lt
 8002148:	18e4      	addlt	r4, r4, r3
 800214a:	f000 fc35 	bl	80029b8 <__malloc_lock>
 800214e:	4a20      	ldr	r2, [pc, #128]	; (80021d0 <_free_r+0x9c>)
 8002150:	9801      	ldr	r0, [sp, #4]
 8002152:	6813      	ldr	r3, [r2, #0]
 8002154:	4615      	mov	r5, r2
 8002156:	b933      	cbnz	r3, 8002166 <_free_r+0x32>
 8002158:	6063      	str	r3, [r4, #4]
 800215a:	6014      	str	r4, [r2, #0]
 800215c:	b003      	add	sp, #12
 800215e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002162:	f000 bc2f 	b.w	80029c4 <__malloc_unlock>
 8002166:	42a3      	cmp	r3, r4
 8002168:	d90b      	bls.n	8002182 <_free_r+0x4e>
 800216a:	6821      	ldr	r1, [r4, #0]
 800216c:	1862      	adds	r2, r4, r1
 800216e:	4293      	cmp	r3, r2
 8002170:	bf04      	itt	eq
 8002172:	681a      	ldreq	r2, [r3, #0]
 8002174:	685b      	ldreq	r3, [r3, #4]
 8002176:	6063      	str	r3, [r4, #4]
 8002178:	bf04      	itt	eq
 800217a:	1852      	addeq	r2, r2, r1
 800217c:	6022      	streq	r2, [r4, #0]
 800217e:	602c      	str	r4, [r5, #0]
 8002180:	e7ec      	b.n	800215c <_free_r+0x28>
 8002182:	461a      	mov	r2, r3
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	b10b      	cbz	r3, 800218c <_free_r+0x58>
 8002188:	42a3      	cmp	r3, r4
 800218a:	d9fa      	bls.n	8002182 <_free_r+0x4e>
 800218c:	6811      	ldr	r1, [r2, #0]
 800218e:	1855      	adds	r5, r2, r1
 8002190:	42a5      	cmp	r5, r4
 8002192:	d10b      	bne.n	80021ac <_free_r+0x78>
 8002194:	6824      	ldr	r4, [r4, #0]
 8002196:	4421      	add	r1, r4
 8002198:	1854      	adds	r4, r2, r1
 800219a:	42a3      	cmp	r3, r4
 800219c:	6011      	str	r1, [r2, #0]
 800219e:	d1dd      	bne.n	800215c <_free_r+0x28>
 80021a0:	681c      	ldr	r4, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	6053      	str	r3, [r2, #4]
 80021a6:	4421      	add	r1, r4
 80021a8:	6011      	str	r1, [r2, #0]
 80021aa:	e7d7      	b.n	800215c <_free_r+0x28>
 80021ac:	d902      	bls.n	80021b4 <_free_r+0x80>
 80021ae:	230c      	movs	r3, #12
 80021b0:	6003      	str	r3, [r0, #0]
 80021b2:	e7d3      	b.n	800215c <_free_r+0x28>
 80021b4:	6825      	ldr	r5, [r4, #0]
 80021b6:	1961      	adds	r1, r4, r5
 80021b8:	428b      	cmp	r3, r1
 80021ba:	bf04      	itt	eq
 80021bc:	6819      	ldreq	r1, [r3, #0]
 80021be:	685b      	ldreq	r3, [r3, #4]
 80021c0:	6063      	str	r3, [r4, #4]
 80021c2:	bf04      	itt	eq
 80021c4:	1949      	addeq	r1, r1, r5
 80021c6:	6021      	streq	r1, [r4, #0]
 80021c8:	6054      	str	r4, [r2, #4]
 80021ca:	e7c7      	b.n	800215c <_free_r+0x28>
 80021cc:	b003      	add	sp, #12
 80021ce:	bd30      	pop	{r4, r5, pc}
 80021d0:	200000b0 	.word	0x200000b0

080021d4 <_malloc_r>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	1ccd      	adds	r5, r1, #3
 80021d8:	f025 0503 	bic.w	r5, r5, #3
 80021dc:	3508      	adds	r5, #8
 80021de:	2d0c      	cmp	r5, #12
 80021e0:	bf38      	it	cc
 80021e2:	250c      	movcc	r5, #12
 80021e4:	2d00      	cmp	r5, #0
 80021e6:	4606      	mov	r6, r0
 80021e8:	db01      	blt.n	80021ee <_malloc_r+0x1a>
 80021ea:	42a9      	cmp	r1, r5
 80021ec:	d903      	bls.n	80021f6 <_malloc_r+0x22>
 80021ee:	230c      	movs	r3, #12
 80021f0:	6033      	str	r3, [r6, #0]
 80021f2:	2000      	movs	r0, #0
 80021f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021f6:	f000 fbdf 	bl	80029b8 <__malloc_lock>
 80021fa:	4921      	ldr	r1, [pc, #132]	; (8002280 <_malloc_r+0xac>)
 80021fc:	680a      	ldr	r2, [r1, #0]
 80021fe:	4614      	mov	r4, r2
 8002200:	b99c      	cbnz	r4, 800222a <_malloc_r+0x56>
 8002202:	4f20      	ldr	r7, [pc, #128]	; (8002284 <_malloc_r+0xb0>)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b923      	cbnz	r3, 8002212 <_malloc_r+0x3e>
 8002208:	4621      	mov	r1, r4
 800220a:	4630      	mov	r0, r6
 800220c:	f000 fb2a 	bl	8002864 <_sbrk_r>
 8002210:	6038      	str	r0, [r7, #0]
 8002212:	4629      	mov	r1, r5
 8002214:	4630      	mov	r0, r6
 8002216:	f000 fb25 	bl	8002864 <_sbrk_r>
 800221a:	1c43      	adds	r3, r0, #1
 800221c:	d123      	bne.n	8002266 <_malloc_r+0x92>
 800221e:	230c      	movs	r3, #12
 8002220:	6033      	str	r3, [r6, #0]
 8002222:	4630      	mov	r0, r6
 8002224:	f000 fbce 	bl	80029c4 <__malloc_unlock>
 8002228:	e7e3      	b.n	80021f2 <_malloc_r+0x1e>
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	1b5b      	subs	r3, r3, r5
 800222e:	d417      	bmi.n	8002260 <_malloc_r+0x8c>
 8002230:	2b0b      	cmp	r3, #11
 8002232:	d903      	bls.n	800223c <_malloc_r+0x68>
 8002234:	6023      	str	r3, [r4, #0]
 8002236:	441c      	add	r4, r3
 8002238:	6025      	str	r5, [r4, #0]
 800223a:	e004      	b.n	8002246 <_malloc_r+0x72>
 800223c:	6863      	ldr	r3, [r4, #4]
 800223e:	42a2      	cmp	r2, r4
 8002240:	bf0c      	ite	eq
 8002242:	600b      	streq	r3, [r1, #0]
 8002244:	6053      	strne	r3, [r2, #4]
 8002246:	4630      	mov	r0, r6
 8002248:	f000 fbbc 	bl	80029c4 <__malloc_unlock>
 800224c:	f104 000b 	add.w	r0, r4, #11
 8002250:	1d23      	adds	r3, r4, #4
 8002252:	f020 0007 	bic.w	r0, r0, #7
 8002256:	1ac2      	subs	r2, r0, r3
 8002258:	d0cc      	beq.n	80021f4 <_malloc_r+0x20>
 800225a:	1a1b      	subs	r3, r3, r0
 800225c:	50a3      	str	r3, [r4, r2]
 800225e:	e7c9      	b.n	80021f4 <_malloc_r+0x20>
 8002260:	4622      	mov	r2, r4
 8002262:	6864      	ldr	r4, [r4, #4]
 8002264:	e7cc      	b.n	8002200 <_malloc_r+0x2c>
 8002266:	1cc4      	adds	r4, r0, #3
 8002268:	f024 0403 	bic.w	r4, r4, #3
 800226c:	42a0      	cmp	r0, r4
 800226e:	d0e3      	beq.n	8002238 <_malloc_r+0x64>
 8002270:	1a21      	subs	r1, r4, r0
 8002272:	4630      	mov	r0, r6
 8002274:	f000 faf6 	bl	8002864 <_sbrk_r>
 8002278:	3001      	adds	r0, #1
 800227a:	d1dd      	bne.n	8002238 <_malloc_r+0x64>
 800227c:	e7cf      	b.n	800221e <_malloc_r+0x4a>
 800227e:	bf00      	nop
 8002280:	200000b0 	.word	0x200000b0
 8002284:	200000b4 	.word	0x200000b4

08002288 <__sfputc_r>:
 8002288:	6893      	ldr	r3, [r2, #8]
 800228a:	3b01      	subs	r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	b410      	push	{r4}
 8002290:	6093      	str	r3, [r2, #8]
 8002292:	da08      	bge.n	80022a6 <__sfputc_r+0x1e>
 8002294:	6994      	ldr	r4, [r2, #24]
 8002296:	42a3      	cmp	r3, r4
 8002298:	db01      	blt.n	800229e <__sfputc_r+0x16>
 800229a:	290a      	cmp	r1, #10
 800229c:	d103      	bne.n	80022a6 <__sfputc_r+0x1e>
 800229e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022a2:	f7ff bc69 	b.w	8001b78 <__swbuf_r>
 80022a6:	6813      	ldr	r3, [r2, #0]
 80022a8:	1c58      	adds	r0, r3, #1
 80022aa:	6010      	str	r0, [r2, #0]
 80022ac:	7019      	strb	r1, [r3, #0]
 80022ae:	4608      	mov	r0, r1
 80022b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <__sfputs_r>:
 80022b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b8:	4606      	mov	r6, r0
 80022ba:	460f      	mov	r7, r1
 80022bc:	4614      	mov	r4, r2
 80022be:	18d5      	adds	r5, r2, r3
 80022c0:	42ac      	cmp	r4, r5
 80022c2:	d101      	bne.n	80022c8 <__sfputs_r+0x12>
 80022c4:	2000      	movs	r0, #0
 80022c6:	e007      	b.n	80022d8 <__sfputs_r+0x22>
 80022c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022cc:	463a      	mov	r2, r7
 80022ce:	4630      	mov	r0, r6
 80022d0:	f7ff ffda 	bl	8002288 <__sfputc_r>
 80022d4:	1c43      	adds	r3, r0, #1
 80022d6:	d1f3      	bne.n	80022c0 <__sfputs_r+0xa>
 80022d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080022dc <_vfiprintf_r>:
 80022dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022e0:	460d      	mov	r5, r1
 80022e2:	b09d      	sub	sp, #116	; 0x74
 80022e4:	4614      	mov	r4, r2
 80022e6:	4698      	mov	r8, r3
 80022e8:	4606      	mov	r6, r0
 80022ea:	b118      	cbz	r0, 80022f4 <_vfiprintf_r+0x18>
 80022ec:	6983      	ldr	r3, [r0, #24]
 80022ee:	b90b      	cbnz	r3, 80022f4 <_vfiprintf_r+0x18>
 80022f0:	f7ff fe1c 	bl	8001f2c <__sinit>
 80022f4:	4b89      	ldr	r3, [pc, #548]	; (800251c <_vfiprintf_r+0x240>)
 80022f6:	429d      	cmp	r5, r3
 80022f8:	d11b      	bne.n	8002332 <_vfiprintf_r+0x56>
 80022fa:	6875      	ldr	r5, [r6, #4]
 80022fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022fe:	07d9      	lsls	r1, r3, #31
 8002300:	d405      	bmi.n	800230e <_vfiprintf_r+0x32>
 8002302:	89ab      	ldrh	r3, [r5, #12]
 8002304:	059a      	lsls	r2, r3, #22
 8002306:	d402      	bmi.n	800230e <_vfiprintf_r+0x32>
 8002308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800230a:	f7ff fead 	bl	8002068 <__retarget_lock_acquire_recursive>
 800230e:	89ab      	ldrh	r3, [r5, #12]
 8002310:	071b      	lsls	r3, r3, #28
 8002312:	d501      	bpl.n	8002318 <_vfiprintf_r+0x3c>
 8002314:	692b      	ldr	r3, [r5, #16]
 8002316:	b9eb      	cbnz	r3, 8002354 <_vfiprintf_r+0x78>
 8002318:	4629      	mov	r1, r5
 800231a:	4630      	mov	r0, r6
 800231c:	f7ff fc7e 	bl	8001c1c <__swsetup_r>
 8002320:	b1c0      	cbz	r0, 8002354 <_vfiprintf_r+0x78>
 8002322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002324:	07dc      	lsls	r4, r3, #31
 8002326:	d50e      	bpl.n	8002346 <_vfiprintf_r+0x6a>
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	b01d      	add	sp, #116	; 0x74
 800232e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002332:	4b7b      	ldr	r3, [pc, #492]	; (8002520 <_vfiprintf_r+0x244>)
 8002334:	429d      	cmp	r5, r3
 8002336:	d101      	bne.n	800233c <_vfiprintf_r+0x60>
 8002338:	68b5      	ldr	r5, [r6, #8]
 800233a:	e7df      	b.n	80022fc <_vfiprintf_r+0x20>
 800233c:	4b79      	ldr	r3, [pc, #484]	; (8002524 <_vfiprintf_r+0x248>)
 800233e:	429d      	cmp	r5, r3
 8002340:	bf08      	it	eq
 8002342:	68f5      	ldreq	r5, [r6, #12]
 8002344:	e7da      	b.n	80022fc <_vfiprintf_r+0x20>
 8002346:	89ab      	ldrh	r3, [r5, #12]
 8002348:	0598      	lsls	r0, r3, #22
 800234a:	d4ed      	bmi.n	8002328 <_vfiprintf_r+0x4c>
 800234c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800234e:	f7ff fe8c 	bl	800206a <__retarget_lock_release_recursive>
 8002352:	e7e9      	b.n	8002328 <_vfiprintf_r+0x4c>
 8002354:	2300      	movs	r3, #0
 8002356:	9309      	str	r3, [sp, #36]	; 0x24
 8002358:	2320      	movs	r3, #32
 800235a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800235e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002362:	2330      	movs	r3, #48	; 0x30
 8002364:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002528 <_vfiprintf_r+0x24c>
 8002368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800236c:	f04f 0901 	mov.w	r9, #1
 8002370:	4623      	mov	r3, r4
 8002372:	469a      	mov	sl, r3
 8002374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002378:	b10a      	cbz	r2, 800237e <_vfiprintf_r+0xa2>
 800237a:	2a25      	cmp	r2, #37	; 0x25
 800237c:	d1f9      	bne.n	8002372 <_vfiprintf_r+0x96>
 800237e:	ebba 0b04 	subs.w	fp, sl, r4
 8002382:	d00b      	beq.n	800239c <_vfiprintf_r+0xc0>
 8002384:	465b      	mov	r3, fp
 8002386:	4622      	mov	r2, r4
 8002388:	4629      	mov	r1, r5
 800238a:	4630      	mov	r0, r6
 800238c:	f7ff ff93 	bl	80022b6 <__sfputs_r>
 8002390:	3001      	adds	r0, #1
 8002392:	f000 80aa 	beq.w	80024ea <_vfiprintf_r+0x20e>
 8002396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002398:	445a      	add	r2, fp
 800239a:	9209      	str	r2, [sp, #36]	; 0x24
 800239c:	f89a 3000 	ldrb.w	r3, [sl]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80a2 	beq.w	80024ea <_vfiprintf_r+0x20e>
 80023a6:	2300      	movs	r3, #0
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023b0:	f10a 0a01 	add.w	sl, sl, #1
 80023b4:	9304      	str	r3, [sp, #16]
 80023b6:	9307      	str	r3, [sp, #28]
 80023b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80023bc:	931a      	str	r3, [sp, #104]	; 0x68
 80023be:	4654      	mov	r4, sl
 80023c0:	2205      	movs	r2, #5
 80023c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023c6:	4858      	ldr	r0, [pc, #352]	; (8002528 <_vfiprintf_r+0x24c>)
 80023c8:	f7fd ff22 	bl	8000210 <memchr>
 80023cc:	9a04      	ldr	r2, [sp, #16]
 80023ce:	b9d8      	cbnz	r0, 8002408 <_vfiprintf_r+0x12c>
 80023d0:	06d1      	lsls	r1, r2, #27
 80023d2:	bf44      	itt	mi
 80023d4:	2320      	movmi	r3, #32
 80023d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023da:	0713      	lsls	r3, r2, #28
 80023dc:	bf44      	itt	mi
 80023de:	232b      	movmi	r3, #43	; 0x2b
 80023e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80023e4:	f89a 3000 	ldrb.w	r3, [sl]
 80023e8:	2b2a      	cmp	r3, #42	; 0x2a
 80023ea:	d015      	beq.n	8002418 <_vfiprintf_r+0x13c>
 80023ec:	9a07      	ldr	r2, [sp, #28]
 80023ee:	4654      	mov	r4, sl
 80023f0:	2000      	movs	r0, #0
 80023f2:	f04f 0c0a 	mov.w	ip, #10
 80023f6:	4621      	mov	r1, r4
 80023f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023fc:	3b30      	subs	r3, #48	; 0x30
 80023fe:	2b09      	cmp	r3, #9
 8002400:	d94e      	bls.n	80024a0 <_vfiprintf_r+0x1c4>
 8002402:	b1b0      	cbz	r0, 8002432 <_vfiprintf_r+0x156>
 8002404:	9207      	str	r2, [sp, #28]
 8002406:	e014      	b.n	8002432 <_vfiprintf_r+0x156>
 8002408:	eba0 0308 	sub.w	r3, r0, r8
 800240c:	fa09 f303 	lsl.w	r3, r9, r3
 8002410:	4313      	orrs	r3, r2
 8002412:	9304      	str	r3, [sp, #16]
 8002414:	46a2      	mov	sl, r4
 8002416:	e7d2      	b.n	80023be <_vfiprintf_r+0xe2>
 8002418:	9b03      	ldr	r3, [sp, #12]
 800241a:	1d19      	adds	r1, r3, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	9103      	str	r1, [sp, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	bfbb      	ittet	lt
 8002424:	425b      	neglt	r3, r3
 8002426:	f042 0202 	orrlt.w	r2, r2, #2
 800242a:	9307      	strge	r3, [sp, #28]
 800242c:	9307      	strlt	r3, [sp, #28]
 800242e:	bfb8      	it	lt
 8002430:	9204      	strlt	r2, [sp, #16]
 8002432:	7823      	ldrb	r3, [r4, #0]
 8002434:	2b2e      	cmp	r3, #46	; 0x2e
 8002436:	d10c      	bne.n	8002452 <_vfiprintf_r+0x176>
 8002438:	7863      	ldrb	r3, [r4, #1]
 800243a:	2b2a      	cmp	r3, #42	; 0x2a
 800243c:	d135      	bne.n	80024aa <_vfiprintf_r+0x1ce>
 800243e:	9b03      	ldr	r3, [sp, #12]
 8002440:	1d1a      	adds	r2, r3, #4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	9203      	str	r2, [sp, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	bfb8      	it	lt
 800244a:	f04f 33ff 	movlt.w	r3, #4294967295
 800244e:	3402      	adds	r4, #2
 8002450:	9305      	str	r3, [sp, #20]
 8002452:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002538 <_vfiprintf_r+0x25c>
 8002456:	7821      	ldrb	r1, [r4, #0]
 8002458:	2203      	movs	r2, #3
 800245a:	4650      	mov	r0, sl
 800245c:	f7fd fed8 	bl	8000210 <memchr>
 8002460:	b140      	cbz	r0, 8002474 <_vfiprintf_r+0x198>
 8002462:	2340      	movs	r3, #64	; 0x40
 8002464:	eba0 000a 	sub.w	r0, r0, sl
 8002468:	fa03 f000 	lsl.w	r0, r3, r0
 800246c:	9b04      	ldr	r3, [sp, #16]
 800246e:	4303      	orrs	r3, r0
 8002470:	3401      	adds	r4, #1
 8002472:	9304      	str	r3, [sp, #16]
 8002474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002478:	482c      	ldr	r0, [pc, #176]	; (800252c <_vfiprintf_r+0x250>)
 800247a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800247e:	2206      	movs	r2, #6
 8002480:	f7fd fec6 	bl	8000210 <memchr>
 8002484:	2800      	cmp	r0, #0
 8002486:	d03f      	beq.n	8002508 <_vfiprintf_r+0x22c>
 8002488:	4b29      	ldr	r3, [pc, #164]	; (8002530 <_vfiprintf_r+0x254>)
 800248a:	bb1b      	cbnz	r3, 80024d4 <_vfiprintf_r+0x1f8>
 800248c:	9b03      	ldr	r3, [sp, #12]
 800248e:	3307      	adds	r3, #7
 8002490:	f023 0307 	bic.w	r3, r3, #7
 8002494:	3308      	adds	r3, #8
 8002496:	9303      	str	r3, [sp, #12]
 8002498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800249a:	443b      	add	r3, r7
 800249c:	9309      	str	r3, [sp, #36]	; 0x24
 800249e:	e767      	b.n	8002370 <_vfiprintf_r+0x94>
 80024a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80024a4:	460c      	mov	r4, r1
 80024a6:	2001      	movs	r0, #1
 80024a8:	e7a5      	b.n	80023f6 <_vfiprintf_r+0x11a>
 80024aa:	2300      	movs	r3, #0
 80024ac:	3401      	adds	r4, #1
 80024ae:	9305      	str	r3, [sp, #20]
 80024b0:	4619      	mov	r1, r3
 80024b2:	f04f 0c0a 	mov.w	ip, #10
 80024b6:	4620      	mov	r0, r4
 80024b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024bc:	3a30      	subs	r2, #48	; 0x30
 80024be:	2a09      	cmp	r2, #9
 80024c0:	d903      	bls.n	80024ca <_vfiprintf_r+0x1ee>
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0c5      	beq.n	8002452 <_vfiprintf_r+0x176>
 80024c6:	9105      	str	r1, [sp, #20]
 80024c8:	e7c3      	b.n	8002452 <_vfiprintf_r+0x176>
 80024ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80024ce:	4604      	mov	r4, r0
 80024d0:	2301      	movs	r3, #1
 80024d2:	e7f0      	b.n	80024b6 <_vfiprintf_r+0x1da>
 80024d4:	ab03      	add	r3, sp, #12
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	462a      	mov	r2, r5
 80024da:	4b16      	ldr	r3, [pc, #88]	; (8002534 <_vfiprintf_r+0x258>)
 80024dc:	a904      	add	r1, sp, #16
 80024de:	4630      	mov	r0, r6
 80024e0:	f3af 8000 	nop.w
 80024e4:	4607      	mov	r7, r0
 80024e6:	1c78      	adds	r0, r7, #1
 80024e8:	d1d6      	bne.n	8002498 <_vfiprintf_r+0x1bc>
 80024ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80024ec:	07d9      	lsls	r1, r3, #31
 80024ee:	d405      	bmi.n	80024fc <_vfiprintf_r+0x220>
 80024f0:	89ab      	ldrh	r3, [r5, #12]
 80024f2:	059a      	lsls	r2, r3, #22
 80024f4:	d402      	bmi.n	80024fc <_vfiprintf_r+0x220>
 80024f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80024f8:	f7ff fdb7 	bl	800206a <__retarget_lock_release_recursive>
 80024fc:	89ab      	ldrh	r3, [r5, #12]
 80024fe:	065b      	lsls	r3, r3, #25
 8002500:	f53f af12 	bmi.w	8002328 <_vfiprintf_r+0x4c>
 8002504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002506:	e711      	b.n	800232c <_vfiprintf_r+0x50>
 8002508:	ab03      	add	r3, sp, #12
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	462a      	mov	r2, r5
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <_vfiprintf_r+0x258>)
 8002510:	a904      	add	r1, sp, #16
 8002512:	4630      	mov	r0, r6
 8002514:	f000 f880 	bl	8002618 <_printf_i>
 8002518:	e7e4      	b.n	80024e4 <_vfiprintf_r+0x208>
 800251a:	bf00      	nop
 800251c:	08002b08 	.word	0x08002b08
 8002520:	08002b28 	.word	0x08002b28
 8002524:	08002ae8 	.word	0x08002ae8
 8002528:	08002b48 	.word	0x08002b48
 800252c:	08002b52 	.word	0x08002b52
 8002530:	00000000 	.word	0x00000000
 8002534:	080022b7 	.word	0x080022b7
 8002538:	08002b4e 	.word	0x08002b4e

0800253c <_printf_common>:
 800253c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002540:	4616      	mov	r6, r2
 8002542:	4699      	mov	r9, r3
 8002544:	688a      	ldr	r2, [r1, #8]
 8002546:	690b      	ldr	r3, [r1, #16]
 8002548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800254c:	4293      	cmp	r3, r2
 800254e:	bfb8      	it	lt
 8002550:	4613      	movlt	r3, r2
 8002552:	6033      	str	r3, [r6, #0]
 8002554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002558:	4607      	mov	r7, r0
 800255a:	460c      	mov	r4, r1
 800255c:	b10a      	cbz	r2, 8002562 <_printf_common+0x26>
 800255e:	3301      	adds	r3, #1
 8002560:	6033      	str	r3, [r6, #0]
 8002562:	6823      	ldr	r3, [r4, #0]
 8002564:	0699      	lsls	r1, r3, #26
 8002566:	bf42      	ittt	mi
 8002568:	6833      	ldrmi	r3, [r6, #0]
 800256a:	3302      	addmi	r3, #2
 800256c:	6033      	strmi	r3, [r6, #0]
 800256e:	6825      	ldr	r5, [r4, #0]
 8002570:	f015 0506 	ands.w	r5, r5, #6
 8002574:	d106      	bne.n	8002584 <_printf_common+0x48>
 8002576:	f104 0a19 	add.w	sl, r4, #25
 800257a:	68e3      	ldr	r3, [r4, #12]
 800257c:	6832      	ldr	r2, [r6, #0]
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	42ab      	cmp	r3, r5
 8002582:	dc26      	bgt.n	80025d2 <_printf_common+0x96>
 8002584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002588:	1e13      	subs	r3, r2, #0
 800258a:	6822      	ldr	r2, [r4, #0]
 800258c:	bf18      	it	ne
 800258e:	2301      	movne	r3, #1
 8002590:	0692      	lsls	r2, r2, #26
 8002592:	d42b      	bmi.n	80025ec <_printf_common+0xb0>
 8002594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002598:	4649      	mov	r1, r9
 800259a:	4638      	mov	r0, r7
 800259c:	47c0      	blx	r8
 800259e:	3001      	adds	r0, #1
 80025a0:	d01e      	beq.n	80025e0 <_printf_common+0xa4>
 80025a2:	6823      	ldr	r3, [r4, #0]
 80025a4:	68e5      	ldr	r5, [r4, #12]
 80025a6:	6832      	ldr	r2, [r6, #0]
 80025a8:	f003 0306 	and.w	r3, r3, #6
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	bf08      	it	eq
 80025b0:	1aad      	subeq	r5, r5, r2
 80025b2:	68a3      	ldr	r3, [r4, #8]
 80025b4:	6922      	ldr	r2, [r4, #16]
 80025b6:	bf0c      	ite	eq
 80025b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025bc:	2500      	movne	r5, #0
 80025be:	4293      	cmp	r3, r2
 80025c0:	bfc4      	itt	gt
 80025c2:	1a9b      	subgt	r3, r3, r2
 80025c4:	18ed      	addgt	r5, r5, r3
 80025c6:	2600      	movs	r6, #0
 80025c8:	341a      	adds	r4, #26
 80025ca:	42b5      	cmp	r5, r6
 80025cc:	d11a      	bne.n	8002604 <_printf_common+0xc8>
 80025ce:	2000      	movs	r0, #0
 80025d0:	e008      	b.n	80025e4 <_printf_common+0xa8>
 80025d2:	2301      	movs	r3, #1
 80025d4:	4652      	mov	r2, sl
 80025d6:	4649      	mov	r1, r9
 80025d8:	4638      	mov	r0, r7
 80025da:	47c0      	blx	r8
 80025dc:	3001      	adds	r0, #1
 80025de:	d103      	bne.n	80025e8 <_printf_common+0xac>
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295
 80025e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025e8:	3501      	adds	r5, #1
 80025ea:	e7c6      	b.n	800257a <_printf_common+0x3e>
 80025ec:	18e1      	adds	r1, r4, r3
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	2030      	movs	r0, #48	; 0x30
 80025f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025f6:	4422      	add	r2, r4
 80025f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002600:	3302      	adds	r3, #2
 8002602:	e7c7      	b.n	8002594 <_printf_common+0x58>
 8002604:	2301      	movs	r3, #1
 8002606:	4622      	mov	r2, r4
 8002608:	4649      	mov	r1, r9
 800260a:	4638      	mov	r0, r7
 800260c:	47c0      	blx	r8
 800260e:	3001      	adds	r0, #1
 8002610:	d0e6      	beq.n	80025e0 <_printf_common+0xa4>
 8002612:	3601      	adds	r6, #1
 8002614:	e7d9      	b.n	80025ca <_printf_common+0x8e>
	...

08002618 <_printf_i>:
 8002618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800261c:	460c      	mov	r4, r1
 800261e:	4691      	mov	r9, r2
 8002620:	7e27      	ldrb	r7, [r4, #24]
 8002622:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002624:	2f78      	cmp	r7, #120	; 0x78
 8002626:	4680      	mov	r8, r0
 8002628:	469a      	mov	sl, r3
 800262a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800262e:	d807      	bhi.n	8002640 <_printf_i+0x28>
 8002630:	2f62      	cmp	r7, #98	; 0x62
 8002632:	d80a      	bhi.n	800264a <_printf_i+0x32>
 8002634:	2f00      	cmp	r7, #0
 8002636:	f000 80d8 	beq.w	80027ea <_printf_i+0x1d2>
 800263a:	2f58      	cmp	r7, #88	; 0x58
 800263c:	f000 80a3 	beq.w	8002786 <_printf_i+0x16e>
 8002640:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002648:	e03a      	b.n	80026c0 <_printf_i+0xa8>
 800264a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800264e:	2b15      	cmp	r3, #21
 8002650:	d8f6      	bhi.n	8002640 <_printf_i+0x28>
 8002652:	a001      	add	r0, pc, #4	; (adr r0, 8002658 <_printf_i+0x40>)
 8002654:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002658:	080026b1 	.word	0x080026b1
 800265c:	080026c5 	.word	0x080026c5
 8002660:	08002641 	.word	0x08002641
 8002664:	08002641 	.word	0x08002641
 8002668:	08002641 	.word	0x08002641
 800266c:	08002641 	.word	0x08002641
 8002670:	080026c5 	.word	0x080026c5
 8002674:	08002641 	.word	0x08002641
 8002678:	08002641 	.word	0x08002641
 800267c:	08002641 	.word	0x08002641
 8002680:	08002641 	.word	0x08002641
 8002684:	080027d1 	.word	0x080027d1
 8002688:	080026f5 	.word	0x080026f5
 800268c:	080027b3 	.word	0x080027b3
 8002690:	08002641 	.word	0x08002641
 8002694:	08002641 	.word	0x08002641
 8002698:	080027f3 	.word	0x080027f3
 800269c:	08002641 	.word	0x08002641
 80026a0:	080026f5 	.word	0x080026f5
 80026a4:	08002641 	.word	0x08002641
 80026a8:	08002641 	.word	0x08002641
 80026ac:	080027bb 	.word	0x080027bb
 80026b0:	680b      	ldr	r3, [r1, #0]
 80026b2:	1d1a      	adds	r2, r3, #4
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	600a      	str	r2, [r1, #0]
 80026b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80026bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0a3      	b.n	800280c <_printf_i+0x1f4>
 80026c4:	6825      	ldr	r5, [r4, #0]
 80026c6:	6808      	ldr	r0, [r1, #0]
 80026c8:	062e      	lsls	r6, r5, #24
 80026ca:	f100 0304 	add.w	r3, r0, #4
 80026ce:	d50a      	bpl.n	80026e6 <_printf_i+0xce>
 80026d0:	6805      	ldr	r5, [r0, #0]
 80026d2:	600b      	str	r3, [r1, #0]
 80026d4:	2d00      	cmp	r5, #0
 80026d6:	da03      	bge.n	80026e0 <_printf_i+0xc8>
 80026d8:	232d      	movs	r3, #45	; 0x2d
 80026da:	426d      	negs	r5, r5
 80026dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026e0:	485e      	ldr	r0, [pc, #376]	; (800285c <_printf_i+0x244>)
 80026e2:	230a      	movs	r3, #10
 80026e4:	e019      	b.n	800271a <_printf_i+0x102>
 80026e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80026ea:	6805      	ldr	r5, [r0, #0]
 80026ec:	600b      	str	r3, [r1, #0]
 80026ee:	bf18      	it	ne
 80026f0:	b22d      	sxthne	r5, r5
 80026f2:	e7ef      	b.n	80026d4 <_printf_i+0xbc>
 80026f4:	680b      	ldr	r3, [r1, #0]
 80026f6:	6825      	ldr	r5, [r4, #0]
 80026f8:	1d18      	adds	r0, r3, #4
 80026fa:	6008      	str	r0, [r1, #0]
 80026fc:	0628      	lsls	r0, r5, #24
 80026fe:	d501      	bpl.n	8002704 <_printf_i+0xec>
 8002700:	681d      	ldr	r5, [r3, #0]
 8002702:	e002      	b.n	800270a <_printf_i+0xf2>
 8002704:	0669      	lsls	r1, r5, #25
 8002706:	d5fb      	bpl.n	8002700 <_printf_i+0xe8>
 8002708:	881d      	ldrh	r5, [r3, #0]
 800270a:	4854      	ldr	r0, [pc, #336]	; (800285c <_printf_i+0x244>)
 800270c:	2f6f      	cmp	r7, #111	; 0x6f
 800270e:	bf0c      	ite	eq
 8002710:	2308      	moveq	r3, #8
 8002712:	230a      	movne	r3, #10
 8002714:	2100      	movs	r1, #0
 8002716:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800271a:	6866      	ldr	r6, [r4, #4]
 800271c:	60a6      	str	r6, [r4, #8]
 800271e:	2e00      	cmp	r6, #0
 8002720:	bfa2      	ittt	ge
 8002722:	6821      	ldrge	r1, [r4, #0]
 8002724:	f021 0104 	bicge.w	r1, r1, #4
 8002728:	6021      	strge	r1, [r4, #0]
 800272a:	b90d      	cbnz	r5, 8002730 <_printf_i+0x118>
 800272c:	2e00      	cmp	r6, #0
 800272e:	d04d      	beq.n	80027cc <_printf_i+0x1b4>
 8002730:	4616      	mov	r6, r2
 8002732:	fbb5 f1f3 	udiv	r1, r5, r3
 8002736:	fb03 5711 	mls	r7, r3, r1, r5
 800273a:	5dc7      	ldrb	r7, [r0, r7]
 800273c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002740:	462f      	mov	r7, r5
 8002742:	42bb      	cmp	r3, r7
 8002744:	460d      	mov	r5, r1
 8002746:	d9f4      	bls.n	8002732 <_printf_i+0x11a>
 8002748:	2b08      	cmp	r3, #8
 800274a:	d10b      	bne.n	8002764 <_printf_i+0x14c>
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	07df      	lsls	r7, r3, #31
 8002750:	d508      	bpl.n	8002764 <_printf_i+0x14c>
 8002752:	6923      	ldr	r3, [r4, #16]
 8002754:	6861      	ldr	r1, [r4, #4]
 8002756:	4299      	cmp	r1, r3
 8002758:	bfde      	ittt	le
 800275a:	2330      	movle	r3, #48	; 0x30
 800275c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002760:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002764:	1b92      	subs	r2, r2, r6
 8002766:	6122      	str	r2, [r4, #16]
 8002768:	f8cd a000 	str.w	sl, [sp]
 800276c:	464b      	mov	r3, r9
 800276e:	aa03      	add	r2, sp, #12
 8002770:	4621      	mov	r1, r4
 8002772:	4640      	mov	r0, r8
 8002774:	f7ff fee2 	bl	800253c <_printf_common>
 8002778:	3001      	adds	r0, #1
 800277a:	d14c      	bne.n	8002816 <_printf_i+0x1fe>
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	b004      	add	sp, #16
 8002782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002786:	4835      	ldr	r0, [pc, #212]	; (800285c <_printf_i+0x244>)
 8002788:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	680e      	ldr	r6, [r1, #0]
 8002790:	061f      	lsls	r7, r3, #24
 8002792:	f856 5b04 	ldr.w	r5, [r6], #4
 8002796:	600e      	str	r6, [r1, #0]
 8002798:	d514      	bpl.n	80027c4 <_printf_i+0x1ac>
 800279a:	07d9      	lsls	r1, r3, #31
 800279c:	bf44      	itt	mi
 800279e:	f043 0320 	orrmi.w	r3, r3, #32
 80027a2:	6023      	strmi	r3, [r4, #0]
 80027a4:	b91d      	cbnz	r5, 80027ae <_printf_i+0x196>
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	f023 0320 	bic.w	r3, r3, #32
 80027ac:	6023      	str	r3, [r4, #0]
 80027ae:	2310      	movs	r3, #16
 80027b0:	e7b0      	b.n	8002714 <_printf_i+0xfc>
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	f043 0320 	orr.w	r3, r3, #32
 80027b8:	6023      	str	r3, [r4, #0]
 80027ba:	2378      	movs	r3, #120	; 0x78
 80027bc:	4828      	ldr	r0, [pc, #160]	; (8002860 <_printf_i+0x248>)
 80027be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027c2:	e7e3      	b.n	800278c <_printf_i+0x174>
 80027c4:	065e      	lsls	r6, r3, #25
 80027c6:	bf48      	it	mi
 80027c8:	b2ad      	uxthmi	r5, r5
 80027ca:	e7e6      	b.n	800279a <_printf_i+0x182>
 80027cc:	4616      	mov	r6, r2
 80027ce:	e7bb      	b.n	8002748 <_printf_i+0x130>
 80027d0:	680b      	ldr	r3, [r1, #0]
 80027d2:	6826      	ldr	r6, [r4, #0]
 80027d4:	6960      	ldr	r0, [r4, #20]
 80027d6:	1d1d      	adds	r5, r3, #4
 80027d8:	600d      	str	r5, [r1, #0]
 80027da:	0635      	lsls	r5, r6, #24
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	d501      	bpl.n	80027e4 <_printf_i+0x1cc>
 80027e0:	6018      	str	r0, [r3, #0]
 80027e2:	e002      	b.n	80027ea <_printf_i+0x1d2>
 80027e4:	0671      	lsls	r1, r6, #25
 80027e6:	d5fb      	bpl.n	80027e0 <_printf_i+0x1c8>
 80027e8:	8018      	strh	r0, [r3, #0]
 80027ea:	2300      	movs	r3, #0
 80027ec:	6123      	str	r3, [r4, #16]
 80027ee:	4616      	mov	r6, r2
 80027f0:	e7ba      	b.n	8002768 <_printf_i+0x150>
 80027f2:	680b      	ldr	r3, [r1, #0]
 80027f4:	1d1a      	adds	r2, r3, #4
 80027f6:	600a      	str	r2, [r1, #0]
 80027f8:	681e      	ldr	r6, [r3, #0]
 80027fa:	6862      	ldr	r2, [r4, #4]
 80027fc:	2100      	movs	r1, #0
 80027fe:	4630      	mov	r0, r6
 8002800:	f7fd fd06 	bl	8000210 <memchr>
 8002804:	b108      	cbz	r0, 800280a <_printf_i+0x1f2>
 8002806:	1b80      	subs	r0, r0, r6
 8002808:	6060      	str	r0, [r4, #4]
 800280a:	6863      	ldr	r3, [r4, #4]
 800280c:	6123      	str	r3, [r4, #16]
 800280e:	2300      	movs	r3, #0
 8002810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002814:	e7a8      	b.n	8002768 <_printf_i+0x150>
 8002816:	6923      	ldr	r3, [r4, #16]
 8002818:	4632      	mov	r2, r6
 800281a:	4649      	mov	r1, r9
 800281c:	4640      	mov	r0, r8
 800281e:	47d0      	blx	sl
 8002820:	3001      	adds	r0, #1
 8002822:	d0ab      	beq.n	800277c <_printf_i+0x164>
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	079b      	lsls	r3, r3, #30
 8002828:	d413      	bmi.n	8002852 <_printf_i+0x23a>
 800282a:	68e0      	ldr	r0, [r4, #12]
 800282c:	9b03      	ldr	r3, [sp, #12]
 800282e:	4298      	cmp	r0, r3
 8002830:	bfb8      	it	lt
 8002832:	4618      	movlt	r0, r3
 8002834:	e7a4      	b.n	8002780 <_printf_i+0x168>
 8002836:	2301      	movs	r3, #1
 8002838:	4632      	mov	r2, r6
 800283a:	4649      	mov	r1, r9
 800283c:	4640      	mov	r0, r8
 800283e:	47d0      	blx	sl
 8002840:	3001      	adds	r0, #1
 8002842:	d09b      	beq.n	800277c <_printf_i+0x164>
 8002844:	3501      	adds	r5, #1
 8002846:	68e3      	ldr	r3, [r4, #12]
 8002848:	9903      	ldr	r1, [sp, #12]
 800284a:	1a5b      	subs	r3, r3, r1
 800284c:	42ab      	cmp	r3, r5
 800284e:	dcf2      	bgt.n	8002836 <_printf_i+0x21e>
 8002850:	e7eb      	b.n	800282a <_printf_i+0x212>
 8002852:	2500      	movs	r5, #0
 8002854:	f104 0619 	add.w	r6, r4, #25
 8002858:	e7f5      	b.n	8002846 <_printf_i+0x22e>
 800285a:	bf00      	nop
 800285c:	08002b59 	.word	0x08002b59
 8002860:	08002b6a 	.word	0x08002b6a

08002864 <_sbrk_r>:
 8002864:	b538      	push	{r3, r4, r5, lr}
 8002866:	4d06      	ldr	r5, [pc, #24]	; (8002880 <_sbrk_r+0x1c>)
 8002868:	2300      	movs	r3, #0
 800286a:	4604      	mov	r4, r0
 800286c:	4608      	mov	r0, r1
 800286e:	602b      	str	r3, [r5, #0]
 8002870:	f7fd ff5c 	bl	800072c <_sbrk>
 8002874:	1c43      	adds	r3, r0, #1
 8002876:	d102      	bne.n	800287e <_sbrk_r+0x1a>
 8002878:	682b      	ldr	r3, [r5, #0]
 800287a:	b103      	cbz	r3, 800287e <_sbrk_r+0x1a>
 800287c:	6023      	str	r3, [r4, #0]
 800287e:	bd38      	pop	{r3, r4, r5, pc}
 8002880:	200000ec 	.word	0x200000ec

08002884 <__sread>:
 8002884:	b510      	push	{r4, lr}
 8002886:	460c      	mov	r4, r1
 8002888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800288c:	f000 f8a0 	bl	80029d0 <_read_r>
 8002890:	2800      	cmp	r0, #0
 8002892:	bfab      	itete	ge
 8002894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002896:	89a3      	ldrhlt	r3, [r4, #12]
 8002898:	181b      	addge	r3, r3, r0
 800289a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800289e:	bfac      	ite	ge
 80028a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80028a2:	81a3      	strhlt	r3, [r4, #12]
 80028a4:	bd10      	pop	{r4, pc}

080028a6 <__swrite>:
 80028a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028aa:	461f      	mov	r7, r3
 80028ac:	898b      	ldrh	r3, [r1, #12]
 80028ae:	05db      	lsls	r3, r3, #23
 80028b0:	4605      	mov	r5, r0
 80028b2:	460c      	mov	r4, r1
 80028b4:	4616      	mov	r6, r2
 80028b6:	d505      	bpl.n	80028c4 <__swrite+0x1e>
 80028b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028bc:	2302      	movs	r3, #2
 80028be:	2200      	movs	r2, #0
 80028c0:	f000 f868 	bl	8002994 <_lseek_r>
 80028c4:	89a3      	ldrh	r3, [r4, #12]
 80028c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028ce:	81a3      	strh	r3, [r4, #12]
 80028d0:	4632      	mov	r2, r6
 80028d2:	463b      	mov	r3, r7
 80028d4:	4628      	mov	r0, r5
 80028d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028da:	f000 b817 	b.w	800290c <_write_r>

080028de <__sseek>:
 80028de:	b510      	push	{r4, lr}
 80028e0:	460c      	mov	r4, r1
 80028e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028e6:	f000 f855 	bl	8002994 <_lseek_r>
 80028ea:	1c43      	adds	r3, r0, #1
 80028ec:	89a3      	ldrh	r3, [r4, #12]
 80028ee:	bf15      	itete	ne
 80028f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80028f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80028f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80028fa:	81a3      	strheq	r3, [r4, #12]
 80028fc:	bf18      	it	ne
 80028fe:	81a3      	strhne	r3, [r4, #12]
 8002900:	bd10      	pop	{r4, pc}

08002902 <__sclose>:
 8002902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002906:	f000 b813 	b.w	8002930 <_close_r>
	...

0800290c <_write_r>:
 800290c:	b538      	push	{r3, r4, r5, lr}
 800290e:	4d07      	ldr	r5, [pc, #28]	; (800292c <_write_r+0x20>)
 8002910:	4604      	mov	r4, r0
 8002912:	4608      	mov	r0, r1
 8002914:	4611      	mov	r1, r2
 8002916:	2200      	movs	r2, #0
 8002918:	602a      	str	r2, [r5, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	f7fd feb5 	bl	800068a <_write>
 8002920:	1c43      	adds	r3, r0, #1
 8002922:	d102      	bne.n	800292a <_write_r+0x1e>
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	b103      	cbz	r3, 800292a <_write_r+0x1e>
 8002928:	6023      	str	r3, [r4, #0]
 800292a:	bd38      	pop	{r3, r4, r5, pc}
 800292c:	200000ec 	.word	0x200000ec

08002930 <_close_r>:
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	4d06      	ldr	r5, [pc, #24]	; (800294c <_close_r+0x1c>)
 8002934:	2300      	movs	r3, #0
 8002936:	4604      	mov	r4, r0
 8002938:	4608      	mov	r0, r1
 800293a:	602b      	str	r3, [r5, #0]
 800293c:	f7fd fec1 	bl	80006c2 <_close>
 8002940:	1c43      	adds	r3, r0, #1
 8002942:	d102      	bne.n	800294a <_close_r+0x1a>
 8002944:	682b      	ldr	r3, [r5, #0]
 8002946:	b103      	cbz	r3, 800294a <_close_r+0x1a>
 8002948:	6023      	str	r3, [r4, #0]
 800294a:	bd38      	pop	{r3, r4, r5, pc}
 800294c:	200000ec 	.word	0x200000ec

08002950 <_fstat_r>:
 8002950:	b538      	push	{r3, r4, r5, lr}
 8002952:	4d07      	ldr	r5, [pc, #28]	; (8002970 <_fstat_r+0x20>)
 8002954:	2300      	movs	r3, #0
 8002956:	4604      	mov	r4, r0
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	602b      	str	r3, [r5, #0]
 800295e:	f7fd febc 	bl	80006da <_fstat>
 8002962:	1c43      	adds	r3, r0, #1
 8002964:	d102      	bne.n	800296c <_fstat_r+0x1c>
 8002966:	682b      	ldr	r3, [r5, #0]
 8002968:	b103      	cbz	r3, 800296c <_fstat_r+0x1c>
 800296a:	6023      	str	r3, [r4, #0]
 800296c:	bd38      	pop	{r3, r4, r5, pc}
 800296e:	bf00      	nop
 8002970:	200000ec 	.word	0x200000ec

08002974 <_isatty_r>:
 8002974:	b538      	push	{r3, r4, r5, lr}
 8002976:	4d06      	ldr	r5, [pc, #24]	; (8002990 <_isatty_r+0x1c>)
 8002978:	2300      	movs	r3, #0
 800297a:	4604      	mov	r4, r0
 800297c:	4608      	mov	r0, r1
 800297e:	602b      	str	r3, [r5, #0]
 8002980:	f7fd febb 	bl	80006fa <_isatty>
 8002984:	1c43      	adds	r3, r0, #1
 8002986:	d102      	bne.n	800298e <_isatty_r+0x1a>
 8002988:	682b      	ldr	r3, [r5, #0]
 800298a:	b103      	cbz	r3, 800298e <_isatty_r+0x1a>
 800298c:	6023      	str	r3, [r4, #0]
 800298e:	bd38      	pop	{r3, r4, r5, pc}
 8002990:	200000ec 	.word	0x200000ec

08002994 <_lseek_r>:
 8002994:	b538      	push	{r3, r4, r5, lr}
 8002996:	4d07      	ldr	r5, [pc, #28]	; (80029b4 <_lseek_r+0x20>)
 8002998:	4604      	mov	r4, r0
 800299a:	4608      	mov	r0, r1
 800299c:	4611      	mov	r1, r2
 800299e:	2200      	movs	r2, #0
 80029a0:	602a      	str	r2, [r5, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f7fd feb4 	bl	8000710 <_lseek>
 80029a8:	1c43      	adds	r3, r0, #1
 80029aa:	d102      	bne.n	80029b2 <_lseek_r+0x1e>
 80029ac:	682b      	ldr	r3, [r5, #0]
 80029ae:	b103      	cbz	r3, 80029b2 <_lseek_r+0x1e>
 80029b0:	6023      	str	r3, [r4, #0]
 80029b2:	bd38      	pop	{r3, r4, r5, pc}
 80029b4:	200000ec 	.word	0x200000ec

080029b8 <__malloc_lock>:
 80029b8:	4801      	ldr	r0, [pc, #4]	; (80029c0 <__malloc_lock+0x8>)
 80029ba:	f7ff bb55 	b.w	8002068 <__retarget_lock_acquire_recursive>
 80029be:	bf00      	nop
 80029c0:	200000e4 	.word	0x200000e4

080029c4 <__malloc_unlock>:
 80029c4:	4801      	ldr	r0, [pc, #4]	; (80029cc <__malloc_unlock+0x8>)
 80029c6:	f7ff bb50 	b.w	800206a <__retarget_lock_release_recursive>
 80029ca:	bf00      	nop
 80029cc:	200000e4 	.word	0x200000e4

080029d0 <_read_r>:
 80029d0:	b538      	push	{r3, r4, r5, lr}
 80029d2:	4d07      	ldr	r5, [pc, #28]	; (80029f0 <_read_r+0x20>)
 80029d4:	4604      	mov	r4, r0
 80029d6:	4608      	mov	r0, r1
 80029d8:	4611      	mov	r1, r2
 80029da:	2200      	movs	r2, #0
 80029dc:	602a      	str	r2, [r5, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	f7fd fe36 	bl	8000650 <_read>
 80029e4:	1c43      	adds	r3, r0, #1
 80029e6:	d102      	bne.n	80029ee <_read_r+0x1e>
 80029e8:	682b      	ldr	r3, [r5, #0]
 80029ea:	b103      	cbz	r3, 80029ee <_read_r+0x1e>
 80029ec:	6023      	str	r3, [r4, #0]
 80029ee:	bd38      	pop	{r3, r4, r5, pc}
 80029f0:	200000ec 	.word	0x200000ec

080029f4 <_init>:
 80029f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f6:	bf00      	nop
 80029f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fa:	bc08      	pop	{r3}
 80029fc:	469e      	mov	lr, r3
 80029fe:	4770      	bx	lr

08002a00 <_fini>:
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	bf00      	nop
 8002a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a06:	bc08      	pop	{r3}
 8002a08:	469e      	mov	lr, r3
 8002a0a:	4770      	bx	lr
